/*
 * ATTENTION: The "eval" devtool has been used (maybe by default in mode: "development").
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
/******/ (() => { // webpackBootstrap
/******/ 	"use strict";
/******/ 	var __webpack_modules__ = ({

/***/ "./src/core-utils/rect.js":
/*!********************************!*\
  !*** ./src/core-utils/rect.js ***!
  \********************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   area: () => (/* binding */ area),\n/* harmony export */   clip: () => (/* binding */ clip),\n/* harmony export */   contains: () => (/* binding */ contains),\n/* harmony export */   expand: () => (/* binding */ expand),\n/* harmony export */   subtract: () => (/* binding */ subtract)\n/* harmony export */ });\nfunction contains(bounds, rect) {\n    return (\n        rect.top >= bounds.top &&\n        rect.left >= bounds.left &&\n        rect.top + rect.height <= bounds.top + bounds.height &&\n        rect.left + rect.width <= bounds.left + bounds.width\n    );\n}\n\nfunction clip(bounds, rect) {\n    const newRect = {\n        top: Math.max(bounds.top, rect.top),\n        left: Math.max(bounds.left, rect.left),\n        width: Math.min(bounds.left + bounds.width, rect.left + rect.width) - Math.max(bounds.left, rect.left),\n        height: Math.min(bounds.top + bounds.height, rect.top + rect.height) - Math.max(bounds.top, rect.top)\n    };\n\n    if (newRect.width >= 0 && newRect.height >= 0)\n        return newRect;\n\n    return {\n        top: bounds.top,\n        left: bounds.left,\n        width: 0,\n        height: 0\n    }\n}\n\nfunction expand(rect, margin) {\n    return {\n        top: rect.top - margin,\n        left: rect.left - margin,\n        width: rect.width + margin * 2,\n        height: rect.height + margin * 2\n    };\n}\n\nfunction area(rect) {\n    return rect.width * rect.height;\n}\n\nfunction subtract(rect, margin) {\n    return {\n        top: rect.top,\n        left: rect.left,\n        width: Math.max(0, rect.width - margin.left - margin.right),\n        height: Math.max(0, rect.height - margin.top - margin.bottom)\n    };\n}\n\n//# sourceURL=webpack://js-spread-grid/./src/core-utils/rect.js?");

/***/ }),

/***/ "./src/core-utils/roundToPixels.js":
/*!*****************************************!*\
  !*** ./src/core-utils/roundToPixels.js ***!
  \*****************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"default\": () => (/* binding */ roundToPixels)\n/* harmony export */ });\nfunction roundToPixels(value, devicePixelRatio) {\n    return Math.round(value * devicePixelRatio) / devicePixelRatio;\n}\n\n//# sourceURL=webpack://js-spread-grid/./src/core-utils/roundToPixels.js?");

/***/ }),

/***/ "./src/core-utils/stringifyId.js":
/*!***************************************!*\
  !*** ./src/core-utils/stringifyId.js ***!
  \***************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"default\": () => (/* binding */ stringifyId)\n/* harmony export */ });\nfunction stringifyObject(object) {\n    const keys = Object.keys(object).sort();\n    const stringified = keys.map(key => {\n        return `${key}:${stringifyId(object[key])}`\n    });\n\n    return `{${stringified.join(',')}}`;\n}\n\nfunction stringifyArray(array) {\n    const stringified = array.map(stringifyId);\n\n    return `[${stringified.join(',')}]`;\n}\n\nfunction stringifyId(key) {\n    if (key === null)\n        return 'null'\n\n    if (Array.isArray(key))\n        return stringifyArray(key)\n\n    if (typeof key === 'object')\n        return stringifyObject(key)\n\n    return JSON.stringify(key)\n}\n\n//# sourceURL=webpack://js-spread-grid/./src/core-utils/stringifyId.js?");

/***/ }),

/***/ "./src/core/render.js":
/*!****************************!*\
  !*** ./src/core/render.js ***!
  \****************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"default\": () => (/* binding */ render)\n/* harmony export */ });\n/* harmony import */ var _core_utils_roundToPixels__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../core-utils/roundToPixels */ \"./src/core-utils/roundToPixels.js\");\n\n\nfunction renderSection(context, vertical, horizontal) {\n    const state = context.state;\n    const canvas = context.canvases[`${vertical}-${horizontal}`];\n    const verticalSection = state.sections[vertical];\n    const horizontalSection = state.sections[horizontal];\n    const columns = horizontalSection.columns;\n    const rows = verticalSection.rows;\n\n    if (rows.length === 0 || columns.length === 0) {\n        if (canvas.parentElement)\n            canvas.parentElement.removeChild(canvas);\n        return;\n    }\n\n    if (!canvas.parentElement)\n        context.element.appendChild(canvas);\n\n    // Checking how often this is called\n    // console.log('draw');\n\n    // TODO: Borders are still blurry after scrolling at high zoom-out levels\n\n    const ctx = canvas.getContext(\"2d\", { alpha: false });\n    // TODO: Make that \"1\" configurable as cell spacing\n    const scrollRect = state.scrollRect;\n    const textResolver = state.textResolver;\n    // TODO: Make sure those formatters are split based on the rule areas\n    const formatResolver = state.renderFormatResolver;\n    const borderWidth = state.borderWidth;\n    const sectionBorders = {\n        top: verticalSection.showTopBorder,\n        bottom: verticalSection.showBottomBorder,\n        left: horizontalSection.showLeftBorder,\n        right: horizontalSection.showRightBorder\n    };\n    const borderOffset = borderWidth / 2;\n    const rowCount = rows.length;\n    const columnCount = columns.length;\n    const horizontalBorderCount = rowCount - 1 + (sectionBorders.top ? 1 : 0) + (sectionBorders.bottom ? 1 : 0);\n    const verticalBorderCount = columnCount - 1 + (sectionBorders.left ? 1 : 0) + (sectionBorders.right ? 1 : 0);\n    const rowHeights = rows.map(row => row.height);\n    const columnWidths = columns.map(column => column.width);\n    const totalWidth = columnWidths.reduce((a, b) => a + b, 0) + verticalBorderCount * borderWidth;\n    const totalHeight = rowHeights.reduce((a, b) => a + b, 0) + horizontalBorderCount * borderWidth;\n\n    const left = horizontal === 'center'\n        ? scrollRect.left\n        : 0;\n    const top = vertical === 'middle'\n        ? scrollRect.top\n        : 0;\n    const width = horizontal === 'center'\n        ? scrollRect.width\n        : horizontalSection.width;\n    const height = vertical === 'middle'\n        ? scrollRect.height\n        : verticalSection.height;\n\n    // TODO: Move somewhere else\n    const horizontalOffsets = columnWidths.reduce((acc, width, index) => {\n        const prevOffset = acc[index];\n        const offset = prevOffset + width + borderWidth;\n        acc.push(offset);\n        return acc;\n    }, [sectionBorders.left ? borderWidth : 0]);\n    const verticalOffsets = rowHeights.reduce((acc, height, index) => {\n        const prevOffset = acc[index];\n        const offset = prevOffset + height + borderWidth;\n        acc.push(offset);\n        return acc;\n    }, [sectionBorders.top ? borderWidth : 0]);\n\n    const columnOffsets = horizontalOffsets.slice(0, -1);\n    const rowOffsets = verticalOffsets.slice(0, -1);\n\n    const minVisibleColumnIndex = Math.max(columnOffsets.findLastIndex(offset => offset <= left), 0);\n    const maxVisibleColumnIndex = columnOffsets.findLastIndex(offset => offset <= left + width);\n    const minVisibleRowIndex = Math.max(rowOffsets.findLastIndex(offset => offset <= top), 0);\n    const maxVisibleRowIndex = rowOffsets.findLastIndex(offset => offset <= top + height);\n\n    const minVisibleVerticalBorderIndex = Math.max(minVisibleColumnIndex, sectionBorders.left ? 0 : 1);\n    const maxVisibleVerticalBorderIndex = maxVisibleColumnIndex + (sectionBorders.right ? 1 : 0);\n    const minVisibleHorizontalBorderIndex = Math.max(minVisibleRowIndex, sectionBorders.top ? 0 : 1);\n    const maxVisibleHorizontalBorderIndex = maxVisibleRowIndex + (sectionBorders.bottom ? 1 : 0);\n\n    const cells = Array.from({ length: maxVisibleRowIndex - minVisibleRowIndex + 1 }, (_, rowIndex) => {\n        const row = rows[rowIndex + minVisibleRowIndex];\n        return Array.from({ length: maxVisibleColumnIndex - minVisibleColumnIndex + 1 }, (_, columnIndex) => {\n            const column = columns[columnIndex + minVisibleColumnIndex];\n            return formatResolver.resolve(row, column);\n        });\n    });\n    const getCell = (rowIndex, columnIndex) => cells[rowIndex - minVisibleRowIndex][columnIndex - minVisibleColumnIndex];\n\n    canvas.width = Math.round(width * devicePixelRatio);\n    canvas.height = Math.round(height * devicePixelRatio);\n    canvas.style.width = `${width}px`;\n    canvas.style.height = `${height}px`;\n    canvas.style.marginLeft = `${left}px`;\n    canvas.style.marginTop = `${top}px`;\n    canvas.style.marginRight = `${totalWidth - width - left}px`;\n    canvas.style.marginBottom = `${totalHeight - height - top}px`;;\n\n    ctx.fillStyle = \"#E9E9E9\";\n    ctx.fillRect(0, 0, canvas.width, canvas.height);\n\n    const setTransform = (x, y) => {\n        ctx.setTransform(devicePixelRatio, 0, 0, devicePixelRatio, (x - left) * devicePixelRatio, (y - top) * devicePixelRatio);\n    };\n    const setClip = (x, y, width, height) => {\n        ctx.beginPath();\n        ctx.rect(x, y, width, height);\n        ctx.clip();\n    };\n\n    // Draw cells\n    for (let columnIndex = minVisibleColumnIndex; columnIndex <= maxVisibleColumnIndex; columnIndex++) {\n        ctx.save();\n        setTransform(horizontalOffsets[columnIndex], 0);\n        setClip(0, 0, columnWidths[columnIndex], totalHeight);\n\n        for (let rowIndex = minVisibleRowIndex; rowIndex <= maxVisibleRowIndex; rowIndex++) {\n            const cell = getCell(rowIndex, columnIndex);\n            const style = cell.style;\n            const cellTop = verticalOffsets[rowIndex];\n            const cellLeft = horizontalOffsets[columnIndex];\n            const cellWidth = columnWidths[columnIndex];\n            const cellHeight = rowHeights[rowIndex];\n            const text = 'text' in cell ? cell.text : cell.value;\n            const textAlign = style.textAlign || 'left';\n            const textBaseline = style.textBaseline || 'middle';\n            const paddingLeft = 'paddingLeft' in style ? style.paddingLeft : 5;\n            const paddingRight = 'paddingRight' in style ? style.paddingRight : 5;\n            const paddingTop = 'paddingTop' in style ? style.paddingTop : 2;\n            const paddingBottom = 'paddingBottom' in style ? style.paddingBottom : 2;\n\n            setTransform(cellLeft, cellTop);\n\n            ctx.fillStyle = style.background || 'white';\n            ctx.fillRect(0, 0, cellWidth, cellHeight);\n\n            if ('draw' in cell)\n                cell.draw(ctx);\n\n            if (style.highlight) {\n                ctx.fillStyle = style.highlight;\n                ctx.fillRect(0, 0, cellWidth, cellHeight);\n            }\n\n            if (style.corner) {\n                ctx.fillStyle = style.corner;\n                ctx.beginPath();\n                ctx.moveTo(cellWidth - 7, cellHeight);\n                ctx.lineTo(cellWidth, cellHeight);\n                ctx.lineTo(cellWidth, cellHeight - 7);\n                ctx.fill();\n            }\n\n            ctx.fillStyle = style.foreground || 'black';\n            ctx.font = style.font || '12px Calibri';\n            ctx.textAlign = textAlign;\n\n            const fontMetrics = textResolver.getFontMetrics(ctx.font);\n\n            // TODO: Make sure that values are rounded using devicePixelRatio\n            const textX = (0,_core_utils_roundToPixels__WEBPACK_IMPORTED_MODULE_0__[\"default\"])(\n                textAlign === 'left' ? paddingLeft :\n                    textAlign === 'center' ? cellWidth / 2 :\n                        textAlign === 'right' ? cellWidth - paddingRight :\n                            0,\n                devicePixelRatio\n            );\n\n            const textY = (0,_core_utils_roundToPixels__WEBPACK_IMPORTED_MODULE_0__[\"default\"])(\n                textBaseline === 'top' ? fontMetrics.middle + fontMetrics.topOffset + paddingTop :\n                    textBaseline === 'middle' ? cellHeight / 2 + fontMetrics.middle :\n                        textBaseline === 'bottom' ? cellHeight + fontMetrics.middle - fontMetrics.bottomOffset - paddingBottom :\n                            0,\n                devicePixelRatio\n            );\n\n            const fitsVertically = textY - fontMetrics.middle - fontMetrics.topOffset >= 0 && textY - fontMetrics.middle + fontMetrics.bottomOffset <= cellHeight;\n\n            if (fitsVertically) {\n                ctx.fillText(text, textX, textY);\n            }\n            else {\n                // TODO: Clip if the text is too high (and draw some indicator if you do)\n                ctx.strokeStyle = '#E9E9E9';\n                ctx.lineWidth = borderWidth;\n\n                ctx.beginPath();\n                ctx.moveTo(0, borderWidth + borderOffset);\n                ctx.lineTo(cellWidth, borderWidth + borderOffset);\n                ctx.moveTo(0, cellHeight - borderWidth - borderOffset);\n                ctx.lineTo(cellWidth, cellHeight - borderWidth - borderOffset);\n                ctx.stroke();\n\n                ctx.save();\n                setClip(0, 2 * borderWidth, cellWidth, cellHeight - 4 * borderWidth);\n\n                ctx.fillText(text, textX, textY);\n\n                ctx.restore();\n            }\n        }\n\n        ctx.restore();\n    }\n\n    setTransform(0, 0);\n\n    // Draw borders\n\n    // TODO: clip drawing area to the middle of neighboring columns/rows (might be useful for redrawing only the changed cells)\n    // TODO: move somewhere (?)\n    const drawBorder = (x1, y1, x2, y2, style) => {\n        if (!style)\n            return;\n\n        const width = style.width * borderWidth;\n\n        const isHorizontal = y1 === y2;\n\n        // TODO: Don't add offset if the border is not continued\n        const xa = x1 - (isHorizontal ? width / 2 : 0);\n        const ya = y1 - (!isHorizontal ? width / 2 : 0);\n        const xb = x2 + (isHorizontal ? width / 2 : 0);\n        const yb = y2 + (!isHorizontal ? width / 2 : 0);\n\n        ctx.strokeStyle = style.color || 'black'; // TODO: resolve this color earlier\n        ctx.lineWidth = width;\n\n        if (style.dash) {\n            ctx.setLineDash(style.dash.map(value => value / devicePixelRatio));\n            ctx.lineDashOffset = (isHorizontal ? xa : ya);\n        }\n        else {\n            ctx.setLineDash([]);\n        }\n\n        ctx.beginPath();\n        ctx.moveTo(xa, ya);\n        ctx.lineTo(xb, yb);\n        ctx.stroke();\n    }\n\n    const selectBorder = (borderStyleA, borderStyleB) => {\n        if (!borderStyleA)\n            return borderStyleB;\n\n        if (!borderStyleB)\n            return borderStyleA;\n\n        if (borderStyleA.index > borderStyleB.index)\n            return borderStyleA;\n\n        return borderStyleB;\n    }\n\n    // TODO: Move somewhere else (?)\n    for (let horizontalBorderIndex = minVisibleHorizontalBorderIndex; horizontalBorderIndex <= maxVisibleHorizontalBorderIndex; horizontalBorderIndex++) {\n        const topRowIndex = horizontalBorderIndex - 1;\n        const bottomRowIndex = horizontalBorderIndex;\n\n        for (let columnIndex = minVisibleColumnIndex; columnIndex <= maxVisibleColumnIndex; columnIndex++) {\n            const topBorderStyle = topRowIndex >= minVisibleRowIndex ? getCell(topRowIndex, columnIndex).style.borderBottom : null;\n            const bottomBorderStyle = bottomRowIndex <= maxVisibleRowIndex ? getCell(bottomRowIndex, columnIndex).style.borderTop : null;\n\n            const borderStyle = selectBorder(topBorderStyle, bottomBorderStyle);\n\n            drawBorder(\n                horizontalOffsets[columnIndex] - borderOffset,\n                verticalOffsets[bottomRowIndex] - borderOffset,\n                horizontalOffsets[columnIndex + 1] - borderOffset,\n                verticalOffsets[bottomRowIndex] - borderOffset,\n                borderStyle);\n        }\n    }\n\n    for (let verticalBorderIndex = minVisibleVerticalBorderIndex; verticalBorderIndex <= maxVisibleVerticalBorderIndex; verticalBorderIndex++) {\n        const leftColumnIndex = verticalBorderIndex - 1;\n        const rightColumnIndex = verticalBorderIndex;\n\n        for (let rowIndex = minVisibleRowIndex; rowIndex <= maxVisibleRowIndex; rowIndex++) {\n            const leftBorderStyle = leftColumnIndex >= minVisibleColumnIndex ? getCell(rowIndex, leftColumnIndex).style.borderRight : null;\n            const rightBorderStyle = rightColumnIndex <= maxVisibleColumnIndex ? getCell(rowIndex, rightColumnIndex).style.borderLeft : null;\n\n            const borderStyle = selectBorder(leftBorderStyle, rightBorderStyle);\n\n            drawBorder(\n                horizontalOffsets[rightColumnIndex] - borderOffset,\n                verticalOffsets[rowIndex] - borderOffset,\n                horizontalOffsets[rightColumnIndex] - borderOffset,\n                verticalOffsets[rowIndex + 1] - borderOffset,\n                borderStyle);\n        }\n    }\n}\n\nfunction renderInput(context) {\n    const element = context.element;\n    const input = context.input;\n    const state = context.state;\n    const inputPlacement = state.inputPlacement;\n\n    if (!inputPlacement) {\n        if (input.parentElement) {\n            const hasFocus = document.activeElement === input;\n            input.parentElement.removeChild(input);\n            if (hasFocus)\n                element.focus();\n        }\n        return;\n    }\n\n    if (!input.parentElement) {\n        const hasFocus = document.activeElement === element;\n        context.element.appendChild(input);\n        if (hasFocus)\n            input.focus();\n    }\n\n    input.style.left = `${inputPlacement.left}px`;\n    input.style.top = `${inputPlacement.top}px`;\n    input.style.width = `${inputPlacement.width}px`;\n    input.style.height = `${inputPlacement.height}px`;\n\n    input.style.backgroundColor = state.isTextValid ? 'white' : '#eb3434';\n}\n\nfunction render(context) {\n    renderSection(context, 'top', 'left');\n    renderSection(context, 'top', 'center');\n    renderSection(context, 'top', 'right');\n    renderSection(context, 'middle', 'left');\n    renderSection(context, 'middle', 'center');\n    renderSection(context, 'middle', 'right');\n    renderSection(context, 'bottom', 'left');\n    renderSection(context, 'bottom', 'center');\n    renderSection(context, 'bottom', 'right');\n\n    renderInput(context);\n}\n\n//# sourceURL=webpack://js-spread-grid/./src/core/render.js?");

/***/ }),

/***/ "./src/core/state.js":
/*!***************************!*\
  !*** ./src/core/state.js ***!
  \***************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"default\": () => (/* binding */ updateState)\n/* harmony export */ });\n/* harmony import */ var _state_utils_getEditableCells__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../state-utils/getEditableCells */ \"./src/state-utils/getEditableCells.js\");\n/* harmony import */ var _state_utils_getDataFormattingRules__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../state-utils/getDataFormattingRules */ \"./src/state-utils/getDataFormattingRules.js\");\n/* harmony import */ var _state_utils_getInputFormattingRules__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../state-utils/getInputFormattingRules */ \"./src/state-utils/getInputFormattingRules.js\");\n/* harmony import */ var _state_utils_getRenderFormattingRules__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../state-utils/getRenderFormattingRules */ \"./src/state-utils/getRenderFormattingRules.js\");\n/* harmony import */ var _state_utils_getSections__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ../state-utils/getSections */ \"./src/state-utils/getSections.js\");\n/* harmony import */ var _state_utils_getVisibilityFormattingRules__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ../state-utils/getVisibilityFormattingRules */ \"./src/state-utils/getVisibilityFormattingRules.js\");\n/* harmony import */ var _state_utils_getEditedCellsAndFilters__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! ../state-utils/getEditedCellsAndFilters */ \"./src/state-utils/getEditedCellsAndFilters.js\");\n/* harmony import */ var _state_utils_getEdition__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! ../state-utils/getEdition */ \"./src/state-utils/getEdition.js\");\n/* harmony import */ var _state_utils_getFilters__WEBPACK_IMPORTED_MODULE_8__ = __webpack_require__(/*! ../state-utils/getFilters */ \"./src/state-utils/getFilters.js\");\n/* harmony import */ var _state_utils_getSelection__WEBPACK_IMPORTED_MODULE_9__ = __webpack_require__(/*! ../state-utils/getSelection */ \"./src/state-utils/getSelection.js\");\n/* harmony import */ var _state_utils_getColumnsOrRows__WEBPACK_IMPORTED_MODULE_10__ = __webpack_require__(/*! ../state-utils/getColumnsOrRows */ \"./src/state-utils/getColumnsOrRows.js\");\n/* harmony import */ var _state_utils_getResolvedColumnsOrRows__WEBPACK_IMPORTED_MODULE_11__ = __webpack_require__(/*! ../state-utils/getResolvedColumnsOrRows */ \"./src/state-utils/getResolvedColumnsOrRows.js\");\n/* harmony import */ var _state_utils_getPlacedColumns__WEBPACK_IMPORTED_MODULE_12__ = __webpack_require__(/*! ../state-utils/getPlacedColumns */ \"./src/state-utils/getPlacedColumns.js\");\n/* harmony import */ var _state_utils_getPlacedRows__WEBPACK_IMPORTED_MODULE_13__ = __webpack_require__(/*! ../state-utils/getPlacedRows */ \"./src/state-utils/getPlacedRows.js\");\n/* harmony import */ var _state_utils_getFormattingRules__WEBPACK_IMPORTED_MODULE_14__ = __webpack_require__(/*! ../state-utils/getFormattingRules */ \"./src/state-utils/getFormattingRules.js\");\n/* harmony import */ var _state_utils_getFormatResolver__WEBPACK_IMPORTED_MODULE_15__ = __webpack_require__(/*! ../state-utils/getFormatResolver */ \"./src/state-utils/getFormatResolver.js\");\n/* harmony import */ var _state_utils_getVisibilityResolver__WEBPACK_IMPORTED_MODULE_16__ = __webpack_require__(/*! ../state-utils/getVisibilityResolver */ \"./src/state-utils/getVisibilityResolver.js\");\n/* harmony import */ var _state_utils_getVisibleColumns__WEBPACK_IMPORTED_MODULE_17__ = __webpack_require__(/*! ../state-utils/getVisibleColumns */ \"./src/state-utils/getVisibleColumns.js\");\n/* harmony import */ var _state_utils_getVisibleRows__WEBPACK_IMPORTED_MODULE_18__ = __webpack_require__(/*! ../state-utils/getVisibleRows */ \"./src/state-utils/getVisibleRows.js\");\n/* harmony import */ var _state_utils_getFixedSize__WEBPACK_IMPORTED_MODULE_19__ = __webpack_require__(/*! ../state-utils/getFixedSize */ \"./src/state-utils/getFixedSize.js\");\n/* harmony import */ var _state_utils_getTotalSize__WEBPACK_IMPORTED_MODULE_20__ = __webpack_require__(/*! ../state-utils/getTotalSize */ \"./src/state-utils/getTotalSize.js\");\n/* harmony import */ var _state_utils_getTextResolver__WEBPACK_IMPORTED_MODULE_21__ = __webpack_require__(/*! ../state-utils/getTextResolver */ \"./src/state-utils/getTextResolver.js\");\n/* harmony import */ var _state_utils_getScrollRect__WEBPACK_IMPORTED_MODULE_22__ = __webpack_require__(/*! ../state-utils/getScrollRect */ \"./src/state-utils/getScrollRect.js\");\n/* harmony import */ var _state_utils_getHoveredCell__WEBPACK_IMPORTED_MODULE_23__ = __webpack_require__(/*! ../state-utils/getHoveredCell */ \"./src/state-utils/getHoveredCell.js\");\n/* harmony import */ var _state_utils_getLookup__WEBPACK_IMPORTED_MODULE_24__ = __webpack_require__(/*! ../state-utils/getLookup */ \"./src/state-utils/getLookup.js\");\n/* harmony import */ var _state_utils_getHighlightedCells__WEBPACK_IMPORTED_MODULE_25__ = __webpack_require__(/*! ../state-utils/getHighlightedCells */ \"./src/state-utils/getHighlightedCells.js\");\n/* harmony import */ var _state_utils_getInputPlacement__WEBPACK_IMPORTED_MODULE_26__ = __webpack_require__(/*! ../state-utils/getInputPlacement */ \"./src/state-utils/getInputPlacement.js\");\n/* harmony import */ var _state_utils_getIsTextValid__WEBPACK_IMPORTED_MODULE_27__ = __webpack_require__(/*! ../state-utils/getIsTextValid */ \"./src/state-utils/getIsTextValid.js\");\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nfunction updateState(context) {\n    console.count('updateState');\n\n    const options = { ...context.localOptions, ...context.externalOptions };\n    const memory = context.memory;\n    const previousState = context.state;\n\n    // TODO: Move to utils\n    function cache(key, func, dependencies) {\n        const previousDependencies = memory[key] && memory[key].dependencies;\n        if (!previousDependencies || dependencies.some((dependency, index) => dependency !== previousDependencies[index]))\n            memory[key] = { value: func(...dependencies), dependencies };\n        return memory[key].value;\n    }\n\n    const devicePixelRatio = window.devicePixelRatio; // TODO: Trigger update on devicePixelRatio change\n    const borderWidth = options.borderWidth / devicePixelRatio;\n    const data = options.data;\n    const text = context.input.value;\n    const dataFormatting = cache('dataFormatting', _state_utils_getDataFormattingRules__WEBPACK_IMPORTED_MODULE_1__[\"default\"], [options.formatting, options.dataSelector]);\n    const editedCellsAndFilters = cache('editedCellsAndFilters', _state_utils_getEditedCellsAndFilters__WEBPACK_IMPORTED_MODULE_6__[\"default\"], [options.editedCells, options.filters]);\n    const edition = cache('edition', _state_utils_getEdition__WEBPACK_IMPORTED_MODULE_7__[\"default\"], [editedCellsAndFilters]);\n    const filters = cache('filters', _state_utils_getFilters__WEBPACK_IMPORTED_MODULE_8__[\"default\"], [options.filters]);\n    const invokedColumns = cache('invokedColumns', _state_utils_getColumnsOrRows__WEBPACK_IMPORTED_MODULE_10__[\"default\"], [options.columns, data]);\n    const invokedRows = cache('invokedRows', _state_utils_getColumnsOrRows__WEBPACK_IMPORTED_MODULE_10__[\"default\"], [options.rows, data]);\n    const unfilteredColumns = cache('unfilteredColumns', _state_utils_getResolvedColumnsOrRows__WEBPACK_IMPORTED_MODULE_11__[\"default\"], [invokedColumns, options.pinnedLeft, options.pinnedRight]);\n    const unfilteredRows = cache('unfilteredRows', _state_utils_getResolvedColumnsOrRows__WEBPACK_IMPORTED_MODULE_11__[\"default\"], [invokedRows, options.pinnedTop, options.pinnedBottom]);\n    const visibilityFormatting = cache('visibilityFormatting', _state_utils_getVisibilityFormattingRules__WEBPACK_IMPORTED_MODULE_5__[\"default\"], [dataFormatting]);\n    const visibilityFormattingRules = cache('visibilityFormattingRules', _state_utils_getFormattingRules__WEBPACK_IMPORTED_MODULE_14__[\"default\"], [visibilityFormatting]);\n    const visibilityResolver = cache('visibilityResolver', _state_utils_getVisibilityResolver__WEBPACK_IMPORTED_MODULE_16__[\"default\"], [visibilityFormattingRules, data, unfilteredRows, unfilteredColumns, filters]);\n    const filteredColumns = cache('filteredColumns', _state_utils_getVisibleColumns__WEBPACK_IMPORTED_MODULE_17__[\"default\"], [visibilityResolver]);\n    const filteredRows = cache('filteredRows', _state_utils_getVisibleRows__WEBPACK_IMPORTED_MODULE_18__[\"default\"], [visibilityResolver]);\n    const columns = cache('columns', _state_utils_getPlacedColumns__WEBPACK_IMPORTED_MODULE_12__[\"default\"], [filteredColumns, devicePixelRatio, borderWidth]);\n    const rows = cache('rows', _state_utils_getPlacedRows__WEBPACK_IMPORTED_MODULE_13__[\"default\"], [filteredRows, devicePixelRatio, borderWidth]);\n    const columnLookup = cache('columnLookup', _state_utils_getLookup__WEBPACK_IMPORTED_MODULE_24__[\"default\"], [columns]);\n    const rowLookup = cache('rowLookup', _state_utils_getLookup__WEBPACK_IMPORTED_MODULE_24__[\"default\"], [rows]);\n    const focusedCell = options.focusedCell;\n    const sections = cache('sections', _state_utils_getSections__WEBPACK_IMPORTED_MODULE_4__[\"default\"], [columns, rows]);\n    const selectedCells = options.selectedCells;\n    const fixedSize = cache('fixedSize', _state_utils_getFixedSize__WEBPACK_IMPORTED_MODULE_19__[\"default\"], [sections.top.height, sections.bottom.height, sections.left.width, sections.right.width]);\n    const totalSize = cache('totalSize', _state_utils_getTotalSize__WEBPACK_IMPORTED_MODULE_20__[\"default\"], [columns, rows]);\n    // TODO: do some proper caching, so that if value is not changed, the old value is returned (currently not working because of scrolling)\n    const hoveredCell = (0,_state_utils_getHoveredCell__WEBPACK_IMPORTED_MODULE_23__[\"default\"])(context.element, context.mousePosition, rows, columns, fixedSize, totalSize);\n    const isMouseDown = context.isMouseDown;\n    const highlightedCells = cache('highlightedCells', _state_utils_getHighlightedCells__WEBPACK_IMPORTED_MODULE_25__[\"default\"], [isMouseDown, focusedCell, hoveredCell, columns, rows, columnLookup, rowLookup]);\n    const selection = cache('selection', _state_utils_getSelection__WEBPACK_IMPORTED_MODULE_9__[\"default\"], [selectedCells]);\n    const highlight = cache('highlight', _state_utils_getSelection__WEBPACK_IMPORTED_MODULE_9__[\"default\"], [highlightedCells]);\n    // TODO: addDataFormattingRules and addRenderFormattingRules should remove unnecessary rules\n    const renderFormatting = cache('renderFormatting', _state_utils_getRenderFormattingRules__WEBPACK_IMPORTED_MODULE_3__[\"default\"], [dataFormatting, hoveredCell, focusedCell, selection, highlight, edition]);\n    const renderFormattingRules = cache('renderFormattingRules', _state_utils_getFormattingRules__WEBPACK_IMPORTED_MODULE_14__[\"default\"], [renderFormatting]);\n    const renderFormatResolver = cache('renderFormatResolver', _state_utils_getFormatResolver__WEBPACK_IMPORTED_MODULE_15__[\"default\"], [renderFormattingRules, data, rows, columns, edition]);\n    const inputFormatting = cache('inputFormatting', _state_utils_getInputFormattingRules__WEBPACK_IMPORTED_MODULE_2__[\"default\"], [dataFormatting]);\n    const inputFormattingRules = cache('inputFormattingRules', _state_utils_getFormattingRules__WEBPACK_IMPORTED_MODULE_14__[\"default\"], [inputFormatting]);\n    const inputFormatResolver = cache('inputFormatResolver', _state_utils_getFormatResolver__WEBPACK_IMPORTED_MODULE_15__[\"default\"], [inputFormattingRules, data, rows, columns, edition]);\n    const textResolver = cache('textResolver', _state_utils_getTextResolver__WEBPACK_IMPORTED_MODULE_21__[\"default\"], []);\n    const editableCells = cache('editableCells', _state_utils_getEditableCells__WEBPACK_IMPORTED_MODULE_0__[\"default\"], [selectedCells, inputFormatResolver, columnLookup, rowLookup]);\n    const inputPlacement = cache('inputPlacement', _state_utils_getInputPlacement__WEBPACK_IMPORTED_MODULE_26__[\"default\"], [editableCells, focusedCell, columnLookup, rowLookup]);\n    const isTextValid = cache('isTextValid', _state_utils_getIsTextValid__WEBPACK_IMPORTED_MODULE_27__[\"default\"], [text, editableCells]);\n\n    // cache result, but not call\n    const scrollRect = (0,_state_utils_getScrollRect__WEBPACK_IMPORTED_MODULE_22__[\"default\"])(previousState?.scrollRect, totalSize, fixedSize, context.element);\n\n    context.state = {\n        options,\n        devicePixelRatio,\n        borderWidth,\n        data,\n        dataFormatting,\n        edition,\n        filters,\n        unfilteredColumns,\n        unfilteredRows,\n        visibilityFormatting,\n        visibilityResolver,\n        filteredColumns,\n        filteredRows,\n        columns,\n        rows,\n        sections,\n        selectedCells,\n        selection,\n        highlight,\n        hoveredCell,\n        focusedCell,\n        renderFormatting,\n        renderFormatResolver,\n        inputFormatting,\n        inputFormatResolver,\n        fixedSize,\n        totalSize,\n        textResolver,\n        scrollRect,\n        highlightedCells,\n        inputPlacement,\n        columnLookup,\n        rowLookup,\n        text,\n        isTextValid\n    };\n}\n\n//# sourceURL=webpack://js-spread-grid/./src/core/state.js?");

/***/ }),

/***/ "./src/index.js":
/*!**********************!*\
  !*** ./src/index.js ***!
  \**********************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"default\": () => (/* binding */ createGrid)\n/* harmony export */ });\n/* harmony import */ var _state_utils_getEditableCells__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./state-utils/getEditableCells */ \"./src/state-utils/getEditableCells.js\");\n/* harmony import */ var _core_utils_stringifyId__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./core-utils/stringifyId */ \"./src/core-utils/stringifyId.js\");\n/* harmony import */ var _core_render__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./core/render */ \"./src/core/render.js\");\n/* harmony import */ var _core_state__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./core/state */ \"./src/core/state.js\");\n/* harmony import */ var _state_utils_getCombinedCells__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ./state-utils/getCombinedCells */ \"./src/state-utils/getCombinedCells.js\");\n/* harmony import */ var _state_utils_getReducedCells__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ./state-utils/getReducedCells */ \"./src/state-utils/getReducedCells.js\");\n\n\n\n\n\n\n\nfunction initialize(element) {\n    if ('spread-grid-context' in element) return;\n\n    const canvases = {\n        'top-left': document.createElement('canvas'),\n        'top-center': document.createElement('canvas'),\n        'top-right': document.createElement('canvas'),\n        'middle-left': document.createElement('canvas'),\n        'middle-center': document.createElement('canvas'),\n        'middle-right': document.createElement('canvas'),\n        'bottom-left': document.createElement('canvas'),\n        'bottom-center': document.createElement('canvas'),\n        'bottom-right': document.createElement('canvas')\n    };\n    const input = document.createElement('input');\n\n    element.setAttribute('tabindex', '0');\n    element.setAttribute('style', 'max-width: 100vw; max-height: 100vh; overflow: auto; display: grid; position: relative; grid-template-columns: fit-content(0) fit-content(0) fit-content(0); grid-template-rows: fit-content(0) fit-content(0) fit-content(0); outline: none;');\n    element.classList.add('spread-grid');\n    canvases['top-left'].setAttribute('style', 'position: sticky; left: 0; top: 0; z-index: 2; grid-row: 1; grid-column: 1;');\n    canvases['top-center'].setAttribute('style', 'position: sticky; top: 0; z-index: 1; grid-row: 1; grid-column: 2;');\n    canvases['top-right'].setAttribute('style', 'position: sticky; right: 0; top: 0; z-index: 2; grid-row: 1; grid-column: 3;');\n    canvases['middle-left'].setAttribute('style', 'position: sticky; left: 0; z-index: 1; grid-row: 2; grid-column: 1;');\n    canvases['middle-center'].setAttribute('style', 'grid-row: 2; grid-column: 2;');\n    canvases['middle-right'].setAttribute('style', 'position: sticky; right: 0; z-index: 1; grid-row: 2; grid-column: 3;');\n    canvases['bottom-left'].setAttribute('style', 'position: sticky; left: 0; bottom: 0; z-index: 2; grid-row: 3; grid-column: 1;');\n    canvases['bottom-center'].setAttribute('style', 'position: sticky; bottom: 0; z-index: 1; grid-row: 3; grid-column: 2;');\n    canvases['bottom-right'].setAttribute('style', 'position: sticky; right: 0; bottom: 0; z-index: 2; grid-row: 3; grid-column: 3;');\n    input.setAttribute('style', 'position: absolute; z-index: 3; outline: none; border: none; box-shadow: none; padding: 0 5px; font-size: 12px; font-family: Calibri; background-color: white; box-sizing: border-box; opacity: 0; pointer-events: none;');\n\n    const context = {\n        externalOptions: {},\n        state: null,\n        memory: {},\n        element: element,\n        canvases: canvases,\n        input: input,\n        renderRequested: false,\n        mousePosition: null,\n        isMouseDown: false,\n    };\n\n    context.requestNewRender = () => {\n        if (context.renderRequested) return;\n        context.renderRequested = true;\n        requestAnimationFrame(() => {\n            context.renderRequested = false;\n            (0,_core_state__WEBPACK_IMPORTED_MODULE_3__[\"default\"])(context);\n            (0,_core_render__WEBPACK_IMPORTED_MODULE_2__[\"default\"])(context);\n        });\n    };\n\n    context.localOptions = {\n        data: [],\n        columns: data => data.length > 0 ? Object.keys(data[0]).map(key => ({ id: key, header: key, width: 100 })) : [],\n        rows: data => [{ id: 'top-header', type: 'HEADER', height: 20 }, ...data.map((_, index) => ({ id: index, height: 20 }))],\n        formatting: [],\n        dataSelector: ({ data, row, column }) => data[row.id][column.id],\n        pinnedTop: 0,\n        pinnedBottom: 0,\n        pinnedLeft: 0,\n        pinnedRight: 0,\n        borderWidth: 1,\n        focusedCell: null,\n        onFocusedCellChange: (focusedCell) => {\n            context.localOptions.focusedCell = focusedCell;\n            context.requestNewRender();\n        },\n        selectedCells: [],\n        onSelectedCellsChange: (selectedCells) => {\n            context.localOptions.selectedCells = selectedCells;\n            context.requestNewRender();\n        },\n        highlightedCells: [],\n        editedCells: [],\n        onEditedCellsChange: (editedCells) => {\n            // TODO: optimize by coalescing\n            context.localOptions.editedCells = editedCells;\n            context.requestNewRender();\n        },\n        filters: [],\n        onFiltersChange: (filters) => {\n            context.localOptions.filters = filters;\n            context.requestNewRender();\n        },\n    };\n\n    element['spread-grid-context'] = context;\n\n    const setText = (text) => {\n        input.value = text;\n        input.dispatchEvent(new Event('input'));\n    }\n\n    element.addEventListener('scroll', (event) => {\n        // TODO: only request new render if scroll position changed outside of the scope\n        // TODO: how to: calculate the new scrollRect here and compare it to the one in the state\n        // TODO: Also don't forget to check if the highlighted cell did change\n        // TODO: Consider forcing a new render when visible scrollRect changes (without waiting for the next render frame)\n        context.requestNewRender();\n    });\n\n    element.addEventListener('mouseenter', (event) => {\n        context.mousePosition = {\n            x: event.clientX - element.offsetLeft,\n            y: event.clientY - element.offsetTop\n        };\n        context.requestNewRender();\n    });\n\n    element.addEventListener('mousemove', (event) => {\n        context.mousePosition = {\n            x: event.clientX - element.offsetLeft,\n            y: event.clientY - element.offsetTop\n        };\n        // TODO: only request new render if hovered cell changed\n        context.requestNewRender();\n    });\n\n    element.addEventListener('mouseleave', () => {\n        context.mousePosition = null;\n        context.requestNewRender();\n    });\n\n    element.addEventListener('mousedown', (event) => {\n        (0,_core_state__WEBPACK_IMPORTED_MODULE_3__[\"default\"])(context);\n        setText('');\n\n        context.isMouseDown = true;\n        context.state.options.onFocusedCellChange(context.state.hoveredCell);\n\n        if (!event.ctrlKey)\n            context.state.options.onSelectedCellsChange([]);\n\n        context.requestNewRender();\n    });\n\n    element.addEventListener('mouseup', (event) => {\n        (0,_core_state__WEBPACK_IMPORTED_MODULE_3__[\"default\"])(context);\n\n        context.isMouseDown = false;\n        context.state.options.onSelectedCellsChange((0,_state_utils_getCombinedCells__WEBPACK_IMPORTED_MODULE_4__[\"default\"])(context.state.options.selectedCells, context.state.highlightedCells));\n        context.requestNewRender();\n    });\n\n    element.addEventListener('dblclick', (event) => {\n        (0,_core_state__WEBPACK_IMPORTED_MODULE_3__[\"default\"])(context);\n\n        const focusedCell = context.state.focusedCell;\n        if (focusedCell === null)\n            return;\n\n        const focusedColumnKey = (0,_core_utils_stringifyId__WEBPACK_IMPORTED_MODULE_1__[\"default\"])(focusedCell.columnId);\n        const focusedRowKey = (0,_core_utils_stringifyId__WEBPACK_IMPORTED_MODULE_1__[\"default\"])(focusedCell.rowId);\n        const columnLookup = context.state.columnLookup;\n        const rowLookup = context.state.rowLookup;\n        const formatResolver = context.state.inputFormatResolver;\n\n        if (!columnLookup.has(focusedColumnKey))\n            return;\n        if (!rowLookup.has(focusedRowKey))\n            return;\n\n        const column = columnLookup.get(focusedColumnKey);\n        const row = rowLookup.get(focusedRowKey);\n        const cell = formatResolver.resolve(row, column);\n        const text = `${cell.value}` // TODO: Use the text, not value (???)\n\n        setText(text);\n        input?.select();\n    });\n\n    element.addEventListener('focus', () => {\n        if (input.parentElement)\n            input.focus();\n    });\n\n    element.addEventListener('keydown', (event) => {\n        // TODO: make sure it's not invoked on keydown of the input\n        (0,_core_state__WEBPACK_IMPORTED_MODULE_3__[\"default\"])(context);\n\n        const focusedCell = context.state.focusedCell;\n        const columnLookup = context.state.columnLookup;\n        const rowLookup = context.state.rowLookup;\n        const formatResolver = context.state.inputFormatResolver;\n        const selectedCells = context.state.options.selectedCells;\n        const setSelectedCells = context.state.options.onSelectedCellsChange;\n        const addSelectedCells = (cells) => setSelectedCells((0,_state_utils_getCombinedCells__WEBPACK_IMPORTED_MODULE_4__[\"default\"])(selectedCells, cells));\n        const setFocusedCell = context.state.options.onFocusedCellChange;\n        const editedCells = context.state.options.editedCells;\n        const setEditedCells = context.state.options.onEditedCellsChange;\n        const addEditedCells = (cells) => setEditedCells((0,_state_utils_getCombinedCells__WEBPACK_IMPORTED_MODULE_4__[\"default\"])(context.state.options.editedCells, cells));\n        const removeEditedCells = (cells) => setEditedCells((0,_state_utils_getReducedCells__WEBPACK_IMPORTED_MODULE_5__[\"default\"])(context.state.options.editedCells, cells));\n        const setFilters = context.state.options.onFiltersChange;\n        const addFilters = (cells) => setFilters((0,_state_utils_getCombinedCells__WEBPACK_IMPORTED_MODULE_4__[\"default\"])(context.state.options.filters, cells));\n        const removeFilters = (cells) => setFilters((0,_state_utils_getReducedCells__WEBPACK_IMPORTED_MODULE_5__[\"default\"])(context.state.options.filters, cells));\n        const columns = context.state.columns;\n        const rows = context.state.rows;\n        const text = context.state.text;\n        const isTextValid = context.state.isTextValid;\n\n        const arrowTo = (cell, event) => {\n            setFocusedCell(cell);\n\n            if (event.shiftKey)\n                addSelectedCells([cell]);\n            else\n                setSelectedCells([cell]);\n        };\n\n        const arrowHorizontally = (offset, event) => {\n            if (!focusedCell)\n                return;\n\n            const focusedColumnKey = (0,_core_utils_stringifyId__WEBPACK_IMPORTED_MODULE_1__[\"default\"])(focusedCell.columnId);\n            if (!columnLookup.has(focusedColumnKey))\n                return;\n\n            const focusedColumnIndex = columnLookup.get(focusedColumnKey).index;\n            const newColumnIndex = Math.max(0, Math.min(columns.length - 1, focusedColumnIndex + offset));\n            if (newColumnIndex === focusedColumnIndex)\n                return;\n\n            const newFocusedCell = { rowId: focusedCell.rowId, columnId: columns[newColumnIndex].id };\n\n            arrowTo(newFocusedCell, event);\n        }\n\n        const arrowVertically = (offset, event) => {\n            if (!focusedCell)\n                return;\n\n            const focusedRowKey = (0,_core_utils_stringifyId__WEBPACK_IMPORTED_MODULE_1__[\"default\"])(focusedCell.rowId);\n            if (!rowLookup.has(focusedRowKey))\n                return;\n\n            const focusedRowIndex = rowLookup.get(focusedRowKey).index;\n            const newRowIndex = Math.max(0, Math.min(rows.length - 1, focusedRowIndex + offset));\n            if (newRowIndex === focusedRowIndex)\n                return;\n\n            const newFocusedCell = { rowId: rows[newRowIndex].id, columnId: focusedCell.columnId };\n\n            arrowTo(newFocusedCell, event);\n        }\n\n        const preventDefault = () => {\n            event.preventDefault();\n            event.stopPropagation();\n        };\n\n        const cancel = () => {\n            if (text !== '') {\n                setText('');\n            }\n            else if (selectedCells.length > 1) {\n                setSelectedCells([focusedCell]);\n            }\n            else if (editedCells.length > 0) {\n                setEditedCells([]);\n            }\n            else {\n                setFocusedCell(null);\n                setSelectedCells([]);\n            }\n        };\n\n        const accept = () => {\n            const editableCells = (0,_state_utils_getEditableCells__WEBPACK_IMPORTED_MODULE_0__[\"default\"])(selectedCells, formatResolver, columnLookup, rowLookup);\n\n            if (text === '')\n                return;\n            if (!isTextValid)\n                return;\n\n            const dataCells = editableCells.filter(cell => cell.type === 'DATA');\n            const filterCells = editableCells.filter(cell => cell.type === 'FILTER');\n\n            addEditedCells(dataCells.map(cell => ({ ...cell.cell, value: cell.edit.parse({ string: text }) })));\n            addFilters(filterCells.map(cell => ({ ...cell.cell, expression: cell.edit.parse({ string: text }) })));\n\n            setText('');\n        };\n\n        const clear = () => {\n            removeEditedCells(selectedCells);\n            removeFilters(selectedCells);\n        }\n\n        switch (event.key) {\n            case 'Escape':\n                cancel();\n                break;\n            case 'Enter':\n                accept();\n                break;\n            case 'ArrowUp':\n                // TODO: When ctrl and shift are pressed together, select all cells between the focused cell and the new cell\n                // TODO: When shift is pressed, expand the current rect selection instead of moving the focused cell\n                preventDefault();\n                arrowVertically(event.ctrlKey ? -rows.length : -1, event);\n                break;\n            case 'ArrowDown':\n                preventDefault();\n                arrowVertically(event.ctrlKey ? rows.length : 1, event);\n                break;\n            case 'ArrowLeft':\n                preventDefault();\n                arrowHorizontally(event.ctrlKey ? -columns.length : -1, event);\n                break;\n            case 'ArrowRight':\n                preventDefault();\n                arrowHorizontally(event.ctrlKey ? columns.length : 1, event);\n                break;\n            case 'Delete':\n            case 'Backspace':\n                clear();\n                break;\n            default:\n                break;\n        }\n    });\n\n    new ResizeObserver(() => {\n        context.requestNewRender();\n    }).observe(element);\n\n    input.addEventListener('input', (event) => {\n        if (event.target.value) {\n            input.style.opacity = 1;\n            input.style.pointerEvents = 'auto';\n        }\n        else {\n            input.style.opacity = 0;\n            input.style.pointerEvents = 'none';\n        }\n    });\n\n    input.addEventListener('click', (event) => {\n        event.stopPropagation();\n    });\n\n    input.addEventListener('dblclick', (event) => {\n        event.stopPropagation();\n    });\n\n    input.addEventListener('mousedown', (event) => {\n        event.stopPropagation();\n    });\n\n    input.addEventListener('keydown', (event) => {\n        switch (event.key) {\n            case 'Enter':\n            case 'Escape':\n                break;\n            case 'Delete':\n            case 'Backspace':\n            case 'ArrowUp':\n            case 'ArrowDown':\n            case 'ArrowLeft':\n            case 'ArrowRight':\n                if (input.value !== '') {\n                    event.stopPropagation();\n                    context.requestNewRender();\n                }\n                break;\n            default:\n                event.stopPropagation();\n                // TODO: maybe only check if the new text is valid\n                context.requestNewRender();\n                break;\n        }\n    });\n}\n\nfunction createGrid(element, options) {\n    console.log('createGrid');\n\n    initialize(element);\n\n    const context = element['spread-grid-context'];\n    context.externalOptions = options;\n\n    if (context.state === null) {\n        (0,_core_state__WEBPACK_IMPORTED_MODULE_3__[\"default\"])(context);\n        (0,_core_render__WEBPACK_IMPORTED_MODULE_2__[\"default\"])(context);\n    }\n    else {\n        context.requestNewRender();\n    }\n}\n\n//# sourceURL=webpack://js-spread-grid/./src/index.js?");

/***/ }),

/***/ "./src/state-utils/getCellType.js":
/*!****************************************!*\
  !*** ./src/state-utils/getCellType.js ***!
  \****************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"default\": () => (/* binding */ getCellType)\n/* harmony export */ });\nfunction getCellType(column, row) {\n    if (column.type === 'FILTER' ^ row.type === 'FILTER')\n        return 'FILTER';\n    if (column.type === 'DATA' && row.type === 'DATA')\n        return 'DATA';\n    return 'OTHER';\n}\n\n//# sourceURL=webpack://js-spread-grid/./src/state-utils/getCellType.js?");

/***/ }),

/***/ "./src/state-utils/getColumnIndex.js":
/*!*******************************************!*\
  !*** ./src/state-utils/getColumnIndex.js ***!
  \*******************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"default\": () => (/* binding */ getColumnIndex)\n/* harmony export */ });\nfunction getColumnIndex(columns, x) {\n    if (columns.length === 0)\n        return -1;\n    if (x < columns[0].leftWithBorder)\n        return -1;\n    if (x > columns[columns.length - 1].rightWithBorder)\n        return -1;\n\n    let iterA = 0;\n    let iterC = columns.length - 1;\n\n    while (iterA <= iterC) {\n        const iterB = Math.floor((iterA + iterC) / 2);\n\n        if (x < columns[iterB].leftWithBorder)\n            iterC = iterB - 1;\n        else if (x > columns[iterB].rightWithBorder)\n            iterA = iterB + 1;\n\n        else\n            return iterB;\n    }\n\n    return -1;\n}\n\n\n//# sourceURL=webpack://js-spread-grid/./src/state-utils/getColumnIndex.js?");

/***/ }),

/***/ "./src/state-utils/getColumnsOrRows.js":
/*!*********************************************!*\
  !*** ./src/state-utils/getColumnsOrRows.js ***!
  \*********************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"default\": () => (/* binding */ getColumnsOrRows)\n/* harmony export */ });\nfunction getColumnsOrRows(columnsOrRows, data) {\n    return typeof columnsOrRows === 'function'\n        ? columnsOrRows(data)\n        : columnsOrRows;\n}\n\n\n//# sourceURL=webpack://js-spread-grid/./src/state-utils/getColumnsOrRows.js?");

/***/ }),

/***/ "./src/state-utils/getCombinedCells.js":
/*!*********************************************!*\
  !*** ./src/state-utils/getCombinedCells.js ***!
  \*********************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"default\": () => (/* binding */ getCombinedCells)\n/* harmony export */ });\n/* harmony import */ var _types_Selection__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../types/Selection */ \"./src/types/Selection.js\");\n\n\nfunction getCombinedCells(previousCells, newCells) {\n    const selection = new _types_Selection__WEBPACK_IMPORTED_MODULE_0__[\"default\"](newCells);\n    return [...newCells, ...previousCells.filter(cell => !selection.isIdSelected(cell.rowId, cell.columnId))];\n}\n\n\n//# sourceURL=webpack://js-spread-grid/./src/state-utils/getCombinedCells.js?");

/***/ }),

/***/ "./src/state-utils/getDataFormattingRules.js":
/*!***************************************************!*\
  !*** ./src/state-utils/getDataFormattingRules.js ***!
  \***************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"default\": () => (/* binding */ getDataFormattingRules)\n/* harmony export */ });\nfunction getDataFormattingRules(formatting, dataSelector) {\n    return [\n        {\n            column: { match: 'ANY' },\n            row: { match: 'HEADER' },\n            value: ({column}) => column.header\n        },\n        {\n            column: { match: 'ANY' },\n            row: { match: 'FILTER' },\n            value: ({newValue}) => newValue || '',\n            text: ({newValue}) => newValue || 'Search...',\n            edit: {\n                validate: () => true,\n                parse: ({ string }) => string,\n            },\n        },\n        {\n            column: { match: 'DATA' },\n            row: { match: 'DATA' },\n            value: dataSelector\n        },\n        ...formatting\n    ];\n}\n\n//# sourceURL=webpack://js-spread-grid/./src/state-utils/getDataFormattingRules.js?");

/***/ }),

/***/ "./src/state-utils/getEditableCells.js":
/*!*********************************************!*\
  !*** ./src/state-utils/getEditableCells.js ***!
  \*********************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"default\": () => (/* binding */ getEditableCells)\n/* harmony export */ });\n/* harmony import */ var _core_utils_stringifyId__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../core-utils/stringifyId */ \"./src/core-utils/stringifyId.js\");\n/* harmony import */ var _getCellType__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./getCellType */ \"./src/state-utils/getCellType.js\");\n\n\n\nfunction getEditableCells(selectedCells, formatResolver, columnLookup, rowLookup) {\n    return selectedCells.map(cell => {\n        const columnKey = (0,_core_utils_stringifyId__WEBPACK_IMPORTED_MODULE_0__[\"default\"])(cell.columnId);\n        const rowKey = (0,_core_utils_stringifyId__WEBPACK_IMPORTED_MODULE_0__[\"default\"])(cell.rowId);\n\n        if (!columnLookup.has(columnKey))\n            return null;\n        if (!rowLookup.has(rowKey))\n            return null;\n\n        const column = columnLookup.get(columnKey);\n        const row = rowLookup.get(rowKey);\n\n        return {\n            edit: formatResolver.resolve(row, column).edit,\n            cell: cell,\n            type: (0,_getCellType__WEBPACK_IMPORTED_MODULE_1__[\"default\"])(column, row)\n        }\n    }).filter(cell => cell?.edit);\n}\n\n//# sourceURL=webpack://js-spread-grid/./src/state-utils/getEditableCells.js?");

/***/ }),

/***/ "./src/state-utils/getEditedCellsAndFilters.js":
/*!*****************************************************!*\
  !*** ./src/state-utils/getEditedCellsAndFilters.js ***!
  \*****************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"default\": () => (/* binding */ getEditedCellsAndFilters)\n/* harmony export */ });\n// TODO: Move\nfunction getEditedCellsAndFilters(editedCells, filters) {\n    return [...editedCells, ...filters.map(filter => ({ columnId: filter.columnId, rowId: filter.rowId, value: filter.expression }))];\n}\n\n\n//# sourceURL=webpack://js-spread-grid/./src/state-utils/getEditedCellsAndFilters.js?");

/***/ }),

/***/ "./src/state-utils/getEdition.js":
/*!***************************************!*\
  !*** ./src/state-utils/getEdition.js ***!
  \***************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"default\": () => (/* binding */ getEdition)\n/* harmony export */ });\n/* harmony import */ var _types_Edition__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../types/Edition */ \"./src/types/Edition.js\");\n\n\n// TODO: Move\nfunction getEdition(editedCellsAndFilters) {\n    return new _types_Edition__WEBPACK_IMPORTED_MODULE_0__[\"default\"](editedCellsAndFilters);\n}\n\n\n//# sourceURL=webpack://js-spread-grid/./src/state-utils/getEdition.js?");

/***/ }),

/***/ "./src/state-utils/getFilters.js":
/*!***************************************!*\
  !*** ./src/state-utils/getFilters.js ***!
  \***************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"default\": () => (/* binding */ getFilters)\n/* harmony export */ });\n/* harmony import */ var _types_Filtering__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../types/Filtering */ \"./src/types/Filtering.js\");\n\n\n// TODO: Move\nfunction getFilters(filters) {\n    return new _types_Filtering__WEBPACK_IMPORTED_MODULE_0__[\"default\"](filters);\n}\n\n\n//# sourceURL=webpack://js-spread-grid/./src/state-utils/getFilters.js?");

/***/ }),

/***/ "./src/state-utils/getFixedSize.js":
/*!*****************************************!*\
  !*** ./src/state-utils/getFixedSize.js ***!
  \*****************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"default\": () => (/* binding */ getFixedSize)\n/* harmony export */ });\nfunction getFixedSize(top, bottom, left, right) {\n    return {\n        top: top,\n        bottom: bottom,\n        left: left,\n        right: right\n    };\n}\n\n\n//# sourceURL=webpack://js-spread-grid/./src/state-utils/getFixedSize.js?");

/***/ }),

/***/ "./src/state-utils/getFormatResolver.js":
/*!**********************************************!*\
  !*** ./src/state-utils/getFormatResolver.js ***!
  \**********************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"default\": () => (/* binding */ getFormatResolver)\n/* harmony export */ });\n/* harmony import */ var _types_FormatResolver__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../types/FormatResolver */ \"./src/types/FormatResolver.js\");\n\n\nfunction getFormatResolver(formattingRules, data, rows, columns, edition) {\n    return new _types_FormatResolver__WEBPACK_IMPORTED_MODULE_0__[\"default\"](formattingRules, data, rows, columns, edition);\n}\n\n\n//# sourceURL=webpack://js-spread-grid/./src/state-utils/getFormatResolver.js?");

/***/ }),

/***/ "./src/state-utils/getFormattingRules.js":
/*!***********************************************!*\
  !*** ./src/state-utils/getFormattingRules.js ***!
  \***********************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"default\": () => (/* binding */ getFormattingRules)\n/* harmony export */ });\n/* harmony import */ var _types_FormattingRules__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../types/FormattingRules */ \"./src/types/FormattingRules.js\");\n\n\nfunction getFormattingRules(dataFormatting) {\n    return new _types_FormattingRules__WEBPACK_IMPORTED_MODULE_0__[\"default\"](dataFormatting);\n}\n\n\n//# sourceURL=webpack://js-spread-grid/./src/state-utils/getFormattingRules.js?");

/***/ }),

/***/ "./src/state-utils/getHighlightedCells.js":
/*!************************************************!*\
  !*** ./src/state-utils/getHighlightedCells.js ***!
  \************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"default\": () => (/* binding */ getHighlightedCells)\n/* harmony export */ });\n/* harmony import */ var _core_utils_stringifyId__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../core-utils/stringifyId */ \"./src/core-utils/stringifyId.js\");\n\n\nfunction getHighlightedCells(isMouseDown, focusedCell, hoveredCell, columns, rows, columnLookup, rowLookup) {\n    if (!isMouseDown)\n        return [];\n    if (!hoveredCell)\n        return [];\n    if (!focusedCell)\n        return [];\n\n    const focusedColumnKey = (0,_core_utils_stringifyId__WEBPACK_IMPORTED_MODULE_0__[\"default\"])(focusedCell.columnId);\n    const focusedRowKey = (0,_core_utils_stringifyId__WEBPACK_IMPORTED_MODULE_0__[\"default\"])(focusedCell.rowId);\n    const hoveredColumnKey = (0,_core_utils_stringifyId__WEBPACK_IMPORTED_MODULE_0__[\"default\"])(hoveredCell.columnId);\n    const hoveredRowKey = (0,_core_utils_stringifyId__WEBPACK_IMPORTED_MODULE_0__[\"default\"])(hoveredCell.rowId);\n\n    if (!columnLookup.has(focusedColumnKey))\n        return [];\n    if (!rowLookup.has(focusedRowKey))\n        return [];\n    if (!columnLookup.has(hoveredColumnKey))\n        return [];\n    if (!rowLookup.has(hoveredRowKey))\n        return [];\n\n    const minColumnIndex = Math.min(columnLookup.get(focusedColumnKey).index, columnLookup.get(hoveredColumnKey).index);\n    const maxColumnIndex = Math.max(columnLookup.get(focusedColumnKey).index, columnLookup.get(hoveredColumnKey).index);\n    const minRowIndex = Math.min(rowLookup.get(focusedRowKey).index, rowLookup.get(hoveredRowKey).index);\n    const maxRowIndex = Math.max(rowLookup.get(focusedRowKey).index, rowLookup.get(hoveredRowKey).index);\n\n    return columns.slice(minColumnIndex, maxColumnIndex + 1).flatMap(column => {\n        return rows.slice(minRowIndex, maxRowIndex + 1).map(row => {\n            return {\n                rowId: row.id,\n                columnId: column.id\n            };\n        });\n    });\n}\n\n\n//# sourceURL=webpack://js-spread-grid/./src/state-utils/getHighlightedCells.js?");

/***/ }),

/***/ "./src/state-utils/getHoveredCell.js":
/*!*******************************************!*\
  !*** ./src/state-utils/getHoveredCell.js ***!
  \*******************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"default\": () => (/* binding */ getHoveredCell)\n/* harmony export */ });\n/* harmony import */ var _getColumnIndex__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./getColumnIndex */ \"./src/state-utils/getColumnIndex.js\");\n/* harmony import */ var _getRowIndex__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./getRowIndex */ \"./src/state-utils/getRowIndex.js\");\n\n\n\nfunction getHoveredCell(element, mousePosition, rows, columns, fixedSize, totalSize) {\n    if (!mousePosition)\n        return null;\n    if (mousePosition.x < 0 || mousePosition.y < 0 || mousePosition.x > totalSize.width || mousePosition.y > totalSize.height)\n        return null;\n\n    const scrollOffset = {\n        left: element.scrollLeft,\n        top: element.scrollTop\n    };\n\n    const clientSize = {\n        width: element.clientWidth,\n        height: element.clientHeight\n    };\n\n    const x = mousePosition.x <= fixedSize.left\n        ? mousePosition.x\n        : mousePosition.x >= clientSize.width - fixedSize.right\n            ? totalSize.width - clientSize.width + mousePosition.x\n            : mousePosition.x + scrollOffset.left;\n    const y = mousePosition.y <= fixedSize.top\n        ? mousePosition.y\n        : mousePosition.y >= clientSize.height - fixedSize.bottom\n            ? totalSize.height - clientSize.height + mousePosition.y\n            : mousePosition.y + scrollOffset.top;\n\n    const hoverRowIndex = (0,_getRowIndex__WEBPACK_IMPORTED_MODULE_1__[\"default\"])(rows, y);\n    const hoverColumnIndex = (0,_getColumnIndex__WEBPACK_IMPORTED_MODULE_0__[\"default\"])(columns, x);\n\n    if (hoverRowIndex === -1 || hoverColumnIndex === -1)\n        return null;\n\n    return {\n        rowId: rows[hoverRowIndex].id,\n        columnId: columns[hoverColumnIndex].id\n    };\n}\n\n\n//# sourceURL=webpack://js-spread-grid/./src/state-utils/getHoveredCell.js?");

/***/ }),

/***/ "./src/state-utils/getInputFormattingRules.js":
/*!****************************************************!*\
  !*** ./src/state-utils/getInputFormattingRules.js ***!
  \****************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"default\": () => (/* binding */ getInputFormattingRules)\n/* harmony export */ });\nfunction getInputFormattingRules(formatting) {\n    return formatting;\n}\n\n//# sourceURL=webpack://js-spread-grid/./src/state-utils/getInputFormattingRules.js?");

/***/ }),

/***/ "./src/state-utils/getInputPlacement.js":
/*!**********************************************!*\
  !*** ./src/state-utils/getInputPlacement.js ***!
  \**********************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"default\": () => (/* binding */ getInputPlacement)\n/* harmony export */ });\n/* harmony import */ var _core_utils_stringifyId__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../core-utils/stringifyId */ \"./src/core-utils/stringifyId.js\");\n\n\nfunction getInputPlacement(editableCells, focusedCell, columnLookup, rowLookup) {\n    if (!focusedCell)\n        return null;\n\n    const focusedColumnKey = (0,_core_utils_stringifyId__WEBPACK_IMPORTED_MODULE_0__[\"default\"])(focusedCell.columnId);\n    const focusedRowKey = (0,_core_utils_stringifyId__WEBPACK_IMPORTED_MODULE_0__[\"default\"])(focusedCell.rowId);\n\n    if (!columnLookup.has(focusedColumnKey))\n        return null;\n    if (!rowLookup.has(focusedRowKey))\n        return null;\n\n    const column = columnLookup.get(focusedColumnKey);\n    const row = rowLookup.get(focusedRowKey);\n\n    if (editableCells.length === 0)\n        return null;\n\n    return {\n        left: column.left,\n        top: row.top,\n        width: column.width,\n        height: row.height,\n        boxSizing: 'border-box',\n    };\n}\n\n\n//# sourceURL=webpack://js-spread-grid/./src/state-utils/getInputPlacement.js?");

/***/ }),

/***/ "./src/state-utils/getIsTextValid.js":
/*!*******************************************!*\
  !*** ./src/state-utils/getIsTextValid.js ***!
  \*******************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"default\": () => (/* binding */ getIsTextValid)\n/* harmony export */ });\nfunction getIsTextValid(text, editableCells) {\n    return editableCells.every(cell => cell.edit.validate({ string: text }));\n}\n\n\n//# sourceURL=webpack://js-spread-grid/./src/state-utils/getIsTextValid.js?");

/***/ }),

/***/ "./src/state-utils/getLookup.js":
/*!**************************************!*\
  !*** ./src/state-utils/getLookup.js ***!
  \**************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"default\": () => (/* binding */ getLookup)\n/* harmony export */ });\nfunction getLookup(elements) {\n    return elements.reduce((lookup, element) => lookup.set(element.key, element), new Map());\n}\n\n\n//# sourceURL=webpack://js-spread-grid/./src/state-utils/getLookup.js?");

/***/ }),

/***/ "./src/state-utils/getPinned.js":
/*!**************************************!*\
  !*** ./src/state-utils/getPinned.js ***!
  \**************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"default\": () => (/* binding */ getPinned)\n/* harmony export */ });\n// TODO: Move\nfunction getPinned(index, length, pinnedBegin, pinnedEnd) {\n    if (index < pinnedBegin)\n        return \"BEGIN\";\n    if (index >= length - pinnedEnd)\n        return \"END\";\n    return undefined;\n}\n\n\n//# sourceURL=webpack://js-spread-grid/./src/state-utils/getPinned.js?");

/***/ }),

/***/ "./src/state-utils/getPlacedColumns.js":
/*!*********************************************!*\
  !*** ./src/state-utils/getPlacedColumns.js ***!
  \*********************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"default\": () => (/* binding */ getPlacedColumns)\n/* harmony export */ });\n/* harmony import */ var _core_utils_roundToPixels__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../core-utils/roundToPixels */ \"./src/core-utils/roundToPixels.js\");\n\n\nfunction getPlacedColumns(columns, devicePixelRatio, borderWidth) {\n    let left = borderWidth;\n\n    return columns.map((column, index) => {\n        const width = (0,_core_utils_roundToPixels__WEBPACK_IMPORTED_MODULE_0__[\"default\"])(column.width, devicePixelRatio);\n        const newColumn = {\n            ...column,\n            index: index,\n            width: width,\n            leftWithBorder: left - borderWidth,\n            left: left,\n            right: left + width,\n            rightWithBorder: left + width + borderWidth\n        };\n\n        left += newColumn.width + borderWidth;\n\n        return newColumn;\n    });\n}\n\n\n//# sourceURL=webpack://js-spread-grid/./src/state-utils/getPlacedColumns.js?");

/***/ }),

/***/ "./src/state-utils/getPlacedRows.js":
/*!******************************************!*\
  !*** ./src/state-utils/getPlacedRows.js ***!
  \******************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"default\": () => (/* binding */ getPlacedRows)\n/* harmony export */ });\n/* harmony import */ var _core_utils_roundToPixels__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../core-utils/roundToPixels */ \"./src/core-utils/roundToPixels.js\");\n\n\nfunction getPlacedRows(rows, devicePixelRatio, borderWidth) {\n    let top = borderWidth;\n\n    return rows.map((row, index) => {\n        const height = (0,_core_utils_roundToPixels__WEBPACK_IMPORTED_MODULE_0__[\"default\"])(row.height, devicePixelRatio);\n        const newRow = {\n            ...row,\n            index: index,\n            height: height,\n            topWithBorder: top - borderWidth,\n            top: top,\n            bottom: top + height,\n            bottomWithBorder: top + height + borderWidth\n        };\n\n        top += newRow.height + borderWidth;\n\n        return newRow;\n    });\n}\n\n\n//# sourceURL=webpack://js-spread-grid/./src/state-utils/getPlacedRows.js?");

/***/ }),

/***/ "./src/state-utils/getReducedCells.js":
/*!********************************************!*\
  !*** ./src/state-utils/getReducedCells.js ***!
  \********************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"default\": () => (/* binding */ getReducedCells)\n/* harmony export */ });\n/* harmony import */ var _types_Selection__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../types/Selection */ \"./src/types/Selection.js\");\n\n\nfunction getReducedCells(previousCells, cellsToRemove) {\n    const selection = new _types_Selection__WEBPACK_IMPORTED_MODULE_0__[\"default\"](cellsToRemove);\n    return previousCells.filter(cell => !selection.isIdSelected(cell.rowId, cell.columnId));\n}\n\n\n//# sourceURL=webpack://js-spread-grid/./src/state-utils/getReducedCells.js?");

/***/ }),

/***/ "./src/state-utils/getRenderFormattingRules.js":
/*!*****************************************************!*\
  !*** ./src/state-utils/getRenderFormattingRules.js ***!
  \*****************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"default\": () => (/* binding */ getRenderFormattingRules)\n/* harmony export */ });\n/* harmony import */ var _core_utils_stringifyId__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../core-utils/stringifyId */ \"./src/core-utils/stringifyId.js\");\n\n\nfunction getHighlightColor(baseColor, isStrong) {\n    if (isStrong)\n        return baseColor + '99';\n    else\n        return baseColor + '33';\n}\n\nfunction getRenderFormattingRules(formatting, hoveredCell, focusedCell, selection, highlight, edition) {\n    const hoveredColumnKey = hoveredCell ? (0,_core_utils_stringifyId__WEBPACK_IMPORTED_MODULE_0__[\"default\"])(hoveredCell.columnId) : null;\n    const hoveredRowKey = hoveredCell ? (0,_core_utils_stringifyId__WEBPACK_IMPORTED_MODULE_0__[\"default\"])(hoveredCell.rowId) : null;\n\n    const focusedColumnKey = focusedCell ? (0,_core_utils_stringifyId__WEBPACK_IMPORTED_MODULE_0__[\"default\"])(focusedCell.columnId) : null;\n    const focusedRowKey = focusedCell ? (0,_core_utils_stringifyId__WEBPACK_IMPORTED_MODULE_0__[\"default\"])(focusedCell.rowId) : null;\n\n    const isSelected = (rows, columns, rowIndex, columnIndex) => {\n        if (rowIndex < 0 || rowIndex >= rows.length)\n            return false;\n        if (columnIndex < 0 || columnIndex >= columns.length)\n            return false;\n\n        const rowKey = rows[rowIndex].key;\n        const columnKey = columns[columnIndex].key;\n\n        return selection.isKeySelected(rowKey, columnKey);\n    };\n\n    return [\n        {\n            column: { match: 'ANY' },\n            row: { match: 'FILTER' },\n            style: ({ newValue }) => ({ background: '#FBFBFB', foreground: newValue ? 'black' : '#cccccc', border: { width: 1, color: 'gray' } })\n        },\n        {\n            column: { match: 'ANY' },\n            row: { match: 'HEADER' },\n            style: { background: '#F5F5F5', border: { width: 1, color: 'gray' } }\n        },\n        ...formatting,\n        {\n            column: { match: 'ANY' },\n            row: { match: 'ANY' },\n            condition: ({ row, column }) => hoveredColumnKey === column.key || hoveredRowKey === row.key,\n            style: { highlight: '#81948133' },\n        },\n        {\n            column: { match: 'ANY' },\n            row: { match: 'ANY' },\n            condition: ({ row, column }) => hoveredColumnKey === column.key && hoveredRowKey === row.key,\n            style: { highlight: '#81948188' },\n        },\n        {\n            column: { match: 'ANY' },\n            row: { match: 'ANY' },\n            condition: ({ rows, columns, row, column }) => isSelected(rows, columns, row.index, column.index),\n            style: ({ rows, columns, row, column, edit }) => ({\n                ...(!isSelected(rows, columns, row.index - 1, column.index) ? { borderTop: { width: 3, color: '#596959', index: Number.MAX_SAFE_INTEGER } } : {}),\n                ...(!isSelected(rows, columns, row.index + 1, column.index) ? { borderBottom: { width: 3, color: '#596959', index: Number.MAX_SAFE_INTEGER } } : {}),\n                ...(!isSelected(rows, columns, row.index, column.index - 1) ? { borderLeft: { width: 3, color: '#596959', index: Number.MAX_SAFE_INTEGER } } : {}),\n                ...(!isSelected(rows, columns, row.index, column.index + 1) ? { borderRight: { width: 3, color: '#596959', index: Number.MAX_SAFE_INTEGER } } : {}),\n                highlight: getHighlightColor(edit ? '#798d9c' : '#819481', focusedColumnKey !== column.key || focusedRowKey !== row.key)\n            }),\n        },\n        {\n            column: { match: 'ANY' },\n            row: { match: 'ANY' },\n            condition: ({ row, column }) => highlight.isKeySelected(row.key, column.key),\n            style: ({ row, column }) => ({\n                highlight: getHighlightColor('#93a8b8', focusedColumnKey !== column.key || focusedRowKey !== row.key)\n            })\n        },\n        {\n            column: { match: 'ANY' },\n            row: { match: 'ANY' },\n            condition: ({ row, column }) => focusedColumnKey === column.key && focusedRowKey === row.key,\n            style: { background: 'white' },\n        },\n        {\n            column: { match: 'ANY' },\n            row: { match: 'ANY' },\n            condition: ({ edit }) => edit,\n            style: { corner: '#77777720' },\n        },\n        {\n            column: { match: 'ANY' },\n            row: { match: 'ANY' },\n            condition: ({ row, column }) => edition.hasValueByKey(row.key, column.key),\n            style: { corner: 'darkgreen' },\n        },\n    ];\n}\n\n//# sourceURL=webpack://js-spread-grid/./src/state-utils/getRenderFormattingRules.js?");

/***/ }),

/***/ "./src/state-utils/getResolvedColumnsOrRows.js":
/*!*****************************************************!*\
  !*** ./src/state-utils/getResolvedColumnsOrRows.js ***!
  \*****************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"default\": () => (/* binding */ getResolvedColumnsOrRows)\n/* harmony export */ });\n/* harmony import */ var _core_utils_stringifyId__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../core-utils/stringifyId */ \"./src/core-utils/stringifyId.js\");\n/* harmony import */ var _getPinned__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./getPinned */ \"./src/state-utils/getPinned.js\");\n\n\n\n// TODO: Move\nfunction getResolvedColumnsOrRows(elements, pinnedBegin, pinnedEnd) {\n    return elements.map((element, index) => {\n        return {\n            ...element,\n            type: element.type || \"DATA\",\n            index: index,\n            key: (0,_core_utils_stringifyId__WEBPACK_IMPORTED_MODULE_0__[\"default\"])(element.id),\n            pinned: (0,_getPinned__WEBPACK_IMPORTED_MODULE_1__[\"default\"])(index, elements.length, pinnedBegin, pinnedEnd)\n        };\n    });\n}\n\n\n//# sourceURL=webpack://js-spread-grid/./src/state-utils/getResolvedColumnsOrRows.js?");

/***/ }),

/***/ "./src/state-utils/getRowIndex.js":
/*!****************************************!*\
  !*** ./src/state-utils/getRowIndex.js ***!
  \****************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"default\": () => (/* binding */ getRowIndex)\n/* harmony export */ });\nfunction getRowIndex(rows, y) {\n    if (rows.length === 0)\n        return -1;\n    if (y < rows[0].topWithBorder)\n        return -1;\n    if (y > rows[rows.length - 1].bottomWithBorder)\n        return -1;\n\n    let iterA = 0;\n    let iterC = rows.length - 1;\n\n    while (iterA <= iterC) {\n        const iterB = Math.floor((iterA + iterC) / 2);\n\n        if (y < rows[iterB].topWithBorder)\n            iterC = iterB - 1;\n        else if (y > rows[iterB].bottomWithBorder)\n            iterA = iterB + 1;\n\n        else\n            return iterB;\n    }\n\n    return -1;\n}\n\n\n//# sourceURL=webpack://js-spread-grid/./src/state-utils/getRowIndex.js?");

/***/ }),

/***/ "./src/state-utils/getScrollRect.js":
/*!******************************************!*\
  !*** ./src/state-utils/getScrollRect.js ***!
  \******************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"default\": () => (/* binding */ getScrollRect)\n/* harmony export */ });\n/* harmony import */ var _core_utils_rect__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../core-utils/rect */ \"./src/core-utils/rect.js\");\n\n\nconst requiredMargin = 200;\nconst preloadedMargin = 400;\nconst emptyRect = {\n    left: 0,\n    top: 0,\n    width: 0,\n    height: 0\n};\n\nfunction getScrollRect(previous, totalSize, fixedSize, element) {\n    // TODO: Is it optimal to use getBoundingClientRect()?\n    const size = {\n        width: element.getBoundingClientRect().width,\n        height: element.getBoundingClientRect().height\n    };\n    const scrollOffset = {\n        left: element.scrollLeft,\n        top: element.scrollTop\n    };\n\n    const prevScrollRect = previous || emptyRect;\n\n    const totalRect = { left: 0, top: 0, ...totalSize };\n    const bounds = (0,_core_utils_rect__WEBPACK_IMPORTED_MODULE_0__.subtract)(totalRect, fixedSize);\n    const scrollRect = (0,_core_utils_rect__WEBPACK_IMPORTED_MODULE_0__.subtract)({ ...scrollOffset, ...size }, fixedSize);\n    const requiredScrollRect = (0,_core_utils_rect__WEBPACK_IMPORTED_MODULE_0__.clip)(bounds, (0,_core_utils_rect__WEBPACK_IMPORTED_MODULE_0__.expand)(scrollRect, requiredMargin));\n    const preloadedScrollRect = (0,_core_utils_rect__WEBPACK_IMPORTED_MODULE_0__.clip)(bounds, (0,_core_utils_rect__WEBPACK_IMPORTED_MODULE_0__.expand)(scrollRect, preloadedMargin));\n\n    if (!(0,_core_utils_rect__WEBPACK_IMPORTED_MODULE_0__.contains)(bounds, prevScrollRect))\n        return preloadedScrollRect;\n\n    if (!(0,_core_utils_rect__WEBPACK_IMPORTED_MODULE_0__.contains)(prevScrollRect, requiredScrollRect))\n        return preloadedScrollRect;\n\n    if ((0,_core_utils_rect__WEBPACK_IMPORTED_MODULE_0__.area)(prevScrollRect) > 2 * (0,_core_utils_rect__WEBPACK_IMPORTED_MODULE_0__.area)(preloadedScrollRect))\n        return preloadedScrollRect;\n\n    return prevScrollRect;\n}\n\n\n//# sourceURL=webpack://js-spread-grid/./src/state-utils/getScrollRect.js?");

/***/ }),

/***/ "./src/state-utils/getSections.js":
/*!****************************************!*\
  !*** ./src/state-utils/getSections.js ***!
  \****************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"default\": () => (/* binding */ getSections)\n/* harmony export */ });\nfunction getSections(columns, rows) {\n    const topLength = rows.filter(row => row.pinned === 'BEGIN').length; // TODO: optimize\n    const bottomLength = rows.filter(row => row.pinned === 'END').length;\n    const middleLength = rows.length - topLength - bottomLength;\n    const leftLength = columns.filter(column => column.pinned === 'BEGIN').length;\n    const rightLength = columns.filter(column => column.pinned === 'END').length;\n    const centerLength = columns.length - leftLength - rightLength;\n\n    const topRows = rows.slice(0, topLength);\n    const bottomRows = rows.slice(rows.length - bottomLength, rows.length);\n    const middleRows = rows.slice(topLength, rows.length - bottomLength);\n    const leftColumns = columns.slice(0, leftLength);\n    const rightColumns = columns.slice(columns.length - rightLength, columns.length);\n    const centerColumns = columns.slice(leftLength, columns.length - rightLength);\n\n    const hasTopRows = topLength > 0;\n    const hasBottomRows = bottomLength > 0;\n    const hasMiddleRows = middleLength > 0;\n    const hasLeftColumns = leftLength > 0;\n    const hasRightColumns = rightLength > 0;\n    const hasCenterColumns = centerLength > 0;\n\n    const topShowTopBorder = true;\n    const topShowBottomBorder = true;\n    const bottomShowTopBorder = hasMiddleRows || !hasTopRows;\n    const bottomShowBottomBorder = true;\n    const middleShowTopBorder = !hasTopRows;\n    const middleShowBottomBorder = !hasBottomRows;\n    const leftShowLeftBorder = true;\n    const leftShowRightBorder = true;\n    const rightShowLeftBorder = hasCenterColumns || !hasLeftColumns;\n    const rightShowRightBorder = true;\n    const centerShowLeftBorder = !hasLeftColumns;\n    const centerShowRightBorder = !hasRightColumns;\n\n    const getHeight = (rows, showTopBorder, showBottomBorder) => {\n        if (rows.length === 0)\n            return 0;\n\n        const top = showTopBorder ? rows.at(0).topWithBorder : rows.at(0).top;\n        const bottom = showBottomBorder ? rows.at(-1).bottomWithBorder : rows.at(-1).bottom;\n\n        return bottom - top;\n    }\n\n    const getWidth = (columns, showLeftBorder, showRightBorder) => {\n        if (columns.length === 0)\n            return 0;\n\n        const left = showLeftBorder ? columns.at(0).leftWithBorder : columns.at(0).left;\n        const right = showRightBorder ? columns.at(-1).rightWithBorder : columns.at(-1).right;\n\n        return right - left;\n    }\n\n    const topHeight = getHeight(topRows, topShowTopBorder, topShowBottomBorder);\n    const bottomHeight = getHeight(bottomRows, bottomShowTopBorder, bottomShowBottomBorder);\n    const middleHeight = getHeight(middleRows, middleShowTopBorder, middleShowBottomBorder);\n    const leftWidth = getWidth(leftColumns, leftShowLeftBorder, leftShowRightBorder);\n    const rightWidth = getWidth(rightColumns, rightShowLeftBorder, rightShowRightBorder);\n    const centerWidth = getWidth(centerColumns, centerShowLeftBorder, centerShowRightBorder);\n\n    return {\n        top: {\n            rows: topRows,\n            showTopBorder: topShowTopBorder,\n            showBottomBorder: topShowBottomBorder,\n            height: topHeight\n        },\n        bottom: {\n            rows: bottomRows,\n            showTopBorder: bottomShowTopBorder,\n            showBottomBorder: bottomShowBottomBorder,\n            height: bottomHeight\n        },\n        middle: {\n            rows: middleRows,\n            showTopBorder: middleShowTopBorder,\n            showBottomBorder: middleShowBottomBorder,\n            height: middleHeight\n        },\n        left: {\n            columns: leftColumns,\n            showLeftBorder: leftShowLeftBorder,\n            showRightBorder: leftShowRightBorder,\n            width: leftWidth\n        },\n        right: {\n            columns: rightColumns,\n            showLeftBorder: rightShowLeftBorder,\n            showRightBorder: rightShowRightBorder,\n            width: rightWidth\n        },\n        center: {\n            columns: centerColumns,\n            showLeftBorder: centerShowLeftBorder,\n            showRightBorder: centerShowRightBorder,\n            width: centerWidth\n        }\n    };\n}\n\n//# sourceURL=webpack://js-spread-grid/./src/state-utils/getSections.js?");

/***/ }),

/***/ "./src/state-utils/getSelection.js":
/*!*****************************************!*\
  !*** ./src/state-utils/getSelection.js ***!
  \*****************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"default\": () => (/* binding */ getSelection)\n/* harmony export */ });\n/* harmony import */ var _types_Selection__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../types/Selection */ \"./src/types/Selection.js\");\n\n\nfunction getSelection(selectedCells) {\n    return new _types_Selection__WEBPACK_IMPORTED_MODULE_0__[\"default\"](selectedCells);\n}\n\n\n//# sourceURL=webpack://js-spread-grid/./src/state-utils/getSelection.js?");

/***/ }),

/***/ "./src/state-utils/getTextResolver.js":
/*!********************************************!*\
  !*** ./src/state-utils/getTextResolver.js ***!
  \********************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"default\": () => (/* binding */ getTextResolver)\n/* harmony export */ });\n/* harmony import */ var _types_TextResolver__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../types/TextResolver */ \"./src/types/TextResolver.js\");\n\n\nfunction getTextResolver() {\n    return new _types_TextResolver__WEBPACK_IMPORTED_MODULE_0__[\"default\"]();\n}\n\n\n//# sourceURL=webpack://js-spread-grid/./src/state-utils/getTextResolver.js?");

/***/ }),

/***/ "./src/state-utils/getTotalSize.js":
/*!*****************************************!*\
  !*** ./src/state-utils/getTotalSize.js ***!
  \*****************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"default\": () => (/* binding */ getTotalSize)\n/* harmony export */ });\nfunction getTotalSize(columns, rows) {\n    return {\n        width: columns.length ? columns.at(-1).rightWithBorder : 0,\n        height: rows.length ? rows.at(-1).bottomWithBorder : 0\n    };\n}\n\n\n//# sourceURL=webpack://js-spread-grid/./src/state-utils/getTotalSize.js?");

/***/ }),

/***/ "./src/state-utils/getVisibilityFormattingRules.js":
/*!*********************************************************!*\
  !*** ./src/state-utils/getVisibilityFormattingRules.js ***!
  \*********************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"default\": () => (/* binding */ getVisibilityFormattingRules)\n/* harmony export */ });\nfunction getVisibilityFormattingRules(formatting) {\n    return formatting; // TODO: Please note that it might need both the value and the text. Check the FormatResolver.js before implementing this\n}\n\n//# sourceURL=webpack://js-spread-grid/./src/state-utils/getVisibilityFormattingRules.js?");

/***/ }),

/***/ "./src/state-utils/getVisibilityResolver.js":
/*!**************************************************!*\
  !*** ./src/state-utils/getVisibilityResolver.js ***!
  \**************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"default\": () => (/* binding */ getVisibilityResolver)\n/* harmony export */ });\n/* harmony import */ var _types_VisibilityResolver__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../types/VisibilityResolver */ \"./src/types/VisibilityResolver.js\");\n\n\nfunction getVisibilityResolver(formattingRules, data, rows, columns, filters) {\n    return new _types_VisibilityResolver__WEBPACK_IMPORTED_MODULE_0__[\"default\"](formattingRules, data, rows, columns, filters);\n}\n\n\n//# sourceURL=webpack://js-spread-grid/./src/state-utils/getVisibilityResolver.js?");

/***/ }),

/***/ "./src/state-utils/getVisibleColumns.js":
/*!**********************************************!*\
  !*** ./src/state-utils/getVisibleColumns.js ***!
  \**********************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"default\": () => (/* binding */ getVisibleColumns)\n/* harmony export */ });\nfunction getVisibleColumns(visibilityResolver) {\n    return visibilityResolver.findVisibleColumns();\n}\n\n\n//# sourceURL=webpack://js-spread-grid/./src/state-utils/getVisibleColumns.js?");

/***/ }),

/***/ "./src/state-utils/getVisibleRows.js":
/*!*******************************************!*\
  !*** ./src/state-utils/getVisibleRows.js ***!
  \*******************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"default\": () => (/* binding */ getVisibleRows)\n/* harmony export */ });\nfunction getVisibleRows(visibilityResolver) {\n    return visibilityResolver.findVisibleRows();\n}\n\n\n//# sourceURL=webpack://js-spread-grid/./src/state-utils/getVisibleRows.js?");

/***/ }),

/***/ "./src/types/Edition.js":
/*!******************************!*\
  !*** ./src/types/Edition.js ***!
  \******************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"default\": () => (/* binding */ Edition)\n/* harmony export */ });\n/* harmony import */ var _core_utils_stringifyId__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../core-utils/stringifyId */ \"./src/core-utils/stringifyId.js\");\n\n\n// TODO: write unit tests\nclass Edition {\n    constructor(editedCells) {\n        this.lookup = new Map();\n\n        editedCells.forEach(cell => {\n            const rowKey = (0,_core_utils_stringifyId__WEBPACK_IMPORTED_MODULE_0__[\"default\"])(cell.rowId);\n            const columnKey = (0,_core_utils_stringifyId__WEBPACK_IMPORTED_MODULE_0__[\"default\"])(cell.columnId);\n\n            if (!this.lookup.has(rowKey))\n                this.lookup.set(rowKey, new Map());\n\n            this.lookup.get(rowKey).set(columnKey, cell.value);\n        });\n    }\n\n    hasValueByKey(rowKey, columnKey) {\n        return this.lookup.has(rowKey) && this.lookup.get(rowKey).has(columnKey);\n    }\n\n    getValueByKey(rowKey, columnKey) {\n        if (!this.hasValueByKey(rowKey, columnKey))\n            return undefined;\n\n        return this.lookup.get(rowKey).get(columnKey);\n    }\n\n    hasValueById(rowId, columnId) {\n        return this.hasValueByKey((0,_core_utils_stringifyId__WEBPACK_IMPORTED_MODULE_0__[\"default\"])(rowId), (0,_core_utils_stringifyId__WEBPACK_IMPORTED_MODULE_0__[\"default\"])(columnId));\n    }\n\n    getValueById(rowId, columnId) {\n        return this.getValueByKey((0,_core_utils_stringifyId__WEBPACK_IMPORTED_MODULE_0__[\"default\"])(rowId), (0,_core_utils_stringifyId__WEBPACK_IMPORTED_MODULE_0__[\"default\"])(columnId));\n    }\n}\n\n//# sourceURL=webpack://js-spread-grid/./src/types/Edition.js?");

/***/ }),

/***/ "./src/types/Filtering.js":
/*!********************************!*\
  !*** ./src/types/Filtering.js ***!
  \********************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"default\": () => (/* binding */ Filtering)\n/* harmony export */ });\n/* harmony import */ var _core_utils_stringifyId__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../core-utils/stringifyId */ \"./src/core-utils/stringifyId.js\");\n\n\n// TODO: Extract the Edition class to a common base class\nclass Filtering {\n    constructor(filters) {\n        this.lookup = new Map();\n        this.filteredColumns = new Set();\n        this.filteredRows = new Set();\n\n        filters.forEach(cell => {\n            const rowKey = (0,_core_utils_stringifyId__WEBPACK_IMPORTED_MODULE_0__[\"default\"])(cell.rowId);\n            const columnKey = (0,_core_utils_stringifyId__WEBPACK_IMPORTED_MODULE_0__[\"default\"])(cell.columnId);\n\n            if (!this.lookup.has(rowKey))\n                this.lookup.set(rowKey, new Map());\n\n            this.lookup.get(rowKey).set(columnKey, cell.expression);\n            this.filteredColumns.add(columnKey);\n            this.filteredRows.add(rowKey);\n        });\n    }\n\n    hasRowFilters() {\n        return this.filteredRows.size > 0;\n    }\n\n    hasColumnFilters() {\n        return this.filteredColumns.size > 0;\n    }\n\n    hasRowFiltersByKey(rowKey) {\n        return this.filteredRows.has(rowKey);\n    }\n\n    hasColumnFiltersByKey(columnKey) {\n        return this.filteredColumns.has(columnKey);\n    }\n\n    hasValueByKey(rowKey, columnKey) {\n        return this.lookup.has(rowKey) && this.lookup.get(rowKey).has(columnKey);\n    }\n\n    getValueByKey(rowKey, columnKey) {\n        if (!this.hasValueByKey(rowKey, columnKey))\n            return undefined;\n\n        return this.lookup.get(rowKey).get(columnKey);\n    }\n\n    hasValueById(rowId, columnId) {\n        return this.hasValueByKey((0,_core_utils_stringifyId__WEBPACK_IMPORTED_MODULE_0__[\"default\"])(rowId), (0,_core_utils_stringifyId__WEBPACK_IMPORTED_MODULE_0__[\"default\"])(columnId));\n    }\n\n    getValueById(rowId, columnId) {\n        return this.getValueByKey((0,_core_utils_stringifyId__WEBPACK_IMPORTED_MODULE_0__[\"default\"])(rowId), (0,_core_utils_stringifyId__WEBPACK_IMPORTED_MODULE_0__[\"default\"])(columnId));\n    }\n\n    hasValueByKeyAndSelector(rowKey, columnKey, selector) {\n        if (selector.type === 'ROW')\n            return this.hasValueByKey(selector.key, columnKey);\n        if (selector.type === 'COLUMN')\n            return this.hasValueByKey(rowKey, selector.key);\n        return false;\n    }\n\n    getValueByKeyAndSelector(rowKey, columnKey, selector) {\n        if (selector.type === 'ROW')\n            return this.getValueByKey(selector.key, columnKey);\n        if (selector.type === 'COLUMN')\n            return this.getValueByKey(rowKey, selector.key);\n        return undefined;\n    }\n};\n\n//# sourceURL=webpack://js-spread-grid/./src/types/Filtering.js?");

/***/ }),

/***/ "./src/types/FormatResolver.js":
/*!*************************************!*\
  !*** ./src/types/FormatResolver.js ***!
  \*************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"default\": () => (/* binding */ FormatResolver)\n/* harmony export */ });\n/* harmony import */ var _Filtering__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./Filtering */ \"./src/types/Filtering.js\");\n\n\nclass FormatResolver {\n    constructor(formattingRules, data, rows, columns, edition) {\n        this.formattingRules = formattingRules;\n        this.data = data;\n        this.rows = rows;\n        this.columns = columns;\n        this.edition = edition;\n        this.filtering = new _Filtering__WEBPACK_IMPORTED_MODULE_0__[\"default\"]([]);\n    }\n\n    resolve(row, column) {\n        return this.formattingRules.resolve(\n            this.data,\n            this.rows,\n            this.columns,\n            row,\n            column,\n            this.edition,\n            this.filtering);\n    }\n}\n\n//# sourceURL=webpack://js-spread-grid/./src/types/FormatResolver.js?");

/***/ }),

/***/ "./src/types/FormattingRules.js":
/*!**************************************!*\
  !*** ./src/types/FormattingRules.js ***!
  \**************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"default\": () => (/* binding */ FormattingRules)\n/* harmony export */ });\n/* harmony import */ var _core_utils_stringifyId__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../core-utils/stringifyId */ \"./src/core-utils/stringifyId.js\");\n\n\nconst borderTypes = ['borderTop', 'borderRight', 'borderBottom', 'borderLeft'];\n\n// TODO: Don't recreate styles if they haven't changed\nfunction indexBorders(style, index) {\n    const newStyle = { ...style };\n\n    if ('border' in newStyle) {\n        for (const borderType of borderTypes)\n            newStyle[borderType] = newStyle.border;\n        delete newStyle.border;\n    }\n\n    for (const borderType of borderTypes)\n        if (borderType in newStyle)\n            newStyle[borderType] = { ...newStyle[borderType], index };\n\n    return newStyle;\n}\n\nfunction mapFilter(filter) {\n    return {\n        by: {\n            type: filter.by.type,\n            key: (0,_core_utils_stringifyId__WEBPACK_IMPORTED_MODULE_0__[\"default\"])(filter.by.id)\n        },\n        condition: filter.condition\n    };\n}\n\nclass StyleGroup {\n    byKey = new Map();\n    byIndex = new Map(); // TODO: Should this be removed?\n    byMatch = new Map();\n};\n\nconst matchMapping = {\n    'HEADER': ['HEADER'],\n    'FILTER': ['FILTER'],\n    'DATA': ['DATA'],\n    'ANY': ['HEADER', 'DATA', 'FILTER'],\n    undefined: []\n};\n\n// TODO: Rename to FormatResolver\n// TODO: Optimize by not searching using keys that don't have correlated match rules\n// TODO: Accept both a function and an object as a style (where the object is a resolved style)\n// TODO: Consider removing index from the lookup\nclass FormattingRules {\n    constructor(rules) {\n        this.columnLookup = new StyleGroup();\n        this.rulesCount = 0;\n\n        for (const rule of rules)\n            this.addRule(rule);\n    }\n\n    addRule(rule) {\n        const columnLookup = this.columnLookup;\n        const index = this.rulesCount++;\n\n        const column = 'column' in rule\n            ? 'id' in rule.column\n                ? { key: (0,_core_utils_stringifyId__WEBPACK_IMPORTED_MODULE_0__[\"default\"])(rule.column.id) }\n                : rule.column\n            : { match: 'DATA' };\n        const row = 'row' in rule\n            ? 'id' in rule.row\n                ? { key: (0,_core_utils_stringifyId__WEBPACK_IMPORTED_MODULE_0__[\"default\"])(rule.row.id) }\n                : rule.row\n            : { match: 'DATA' };\n\n        const entry = {};\n        if ('condition' in rule)\n            entry.condition = rule.condition;\n        if ('style' in rule)\n            entry.style = typeof rule.style === 'function' ? rule.style : () => rule.style;\n        if ('value' in rule)\n            entry.value = typeof rule.value === 'function' ? rule.value : () => rule.value;\n        if ('text' in rule)\n            entry.text = typeof rule.text === 'function' ? rule.text : () => rule.text;\n        if ('edit' in rule)\n            entry.edit = rule.edit;\n        if ('draw' in rule)\n            entry.draw = rule.draw;\n        if ('filter' in rule)\n            entry.filter = mapFilter(rule.filter);\n\n        function addRowRule(lookup, key) {\n            if (!lookup.has(key))\n                lookup.set(key, []);\n\n            lookup.get(key).push({\n                index: index,\n                ...entry\n            });\n        }\n\n        function addColumnRule(lookup, key) {\n            if (!lookup.has(key))\n                lookup.set(key, new StyleGroup());\n\n            if ('key' in row)\n                addRowRule(lookup.get(key).byKey, row.key);\n            if ('index' in row)\n                addRowRule(lookup.get(key).byIndex, row.index);\n            for (const match of matchMapping[row.match])\n                addRowRule(lookup.get(key).byMatch, match);\n        }\n\n        if ('key' in column)\n            addColumnRule(columnLookup.byKey, column.key);\n        if ('index' in column)\n            addColumnRule(columnLookup.byIndex, column.index);\n        for (const match of matchMapping[column.match])\n            addColumnRule(columnLookup.byMatch, match);\n    }\n\n    resolve(data, rows, columns, row, column, edition, filtering) {\n        const columnLookup = this.columnLookup;\n\n        const rules = [];\n\n        function gatherRules(newRules) {\n            for (const rule of newRules)\n                rules.push(rule);\n        }\n\n        function gatherRowRules(lookup) {\n            if (lookup.byKey.has(row.key))\n                gatherRules(lookup.byKey.get(row.key));\n            if (lookup.byIndex.has(row.index))\n                gatherRules(lookup.byIndex.get(row.index));\n            if (lookup.byMatch.has(row.type))\n                gatherRules(lookup.byMatch.get(row.type));\n        }\n\n        if (columnLookup.byKey.has(column.key))\n            gatherRowRules(columnLookup.byKey.get(column.key));\n        if (columnLookup.byIndex.has(column.index))\n            gatherRowRules(columnLookup.byIndex.get(column.index));\n        if (columnLookup.byMatch.has(column.type))\n            gatherRowRules(columnLookup.byMatch.get(column.type));\n\n        rules.sort((a, b) => a.index - b.index);\n\n        let context = { data, rows, columns, row, column };\n        let style = {};\n        let draw = undefined;\n        let visible = true;\n\n        if (edition.hasValueByKey(row.key, column.key))\n            context = { ...context, newValue: edition.getValueByKey(row.key, column.key) };\n\n        for (const rule of rules) {\n            if ('condition' in rule && !rule.condition(context))\n                continue;\n\n            if ('value' in rule)\n                context = { ...context, value: rule.value(context) };\n            if ('style' in rule)\n                style = { ...style, ...indexBorders(rule.style(context), rule.index) };\n            if ('text' in rule)\n                context = { ...context, text: rule.text(context) };\n            if ('edit' in rule)\n                context = { ...context, edit: rule.edit };\n            if ('draw' in rule) {\n                const currentContext = context;\n                draw = (ctx) => rule.draw({ ...currentContext, ctx });\n            }\n            if ('filter' in rule && filtering.hasValueByKeyAndSelector(row.key, column.key, rule.filter.by)) {\n                const filterContext = { ...context, expression: filtering.getValueByKeyAndSelector(row.key, column.key, rule.filter.by) };\n                visible = visible && rule.filter.condition(filterContext);\n            }\n\n            // TODO: Add StopPropagation\n        }\n\n        const result = {\n            style,\n            visible\n        };\n\n        if ('value' in context)\n            result.value = context.value;\n        if ('edit' in context)\n            result.edit = context.edit;\n        if (draw !== undefined)\n            result.draw = draw;\n        if ('text' in context)\n            result.text = context.text;\n\n        return result;\n    }\n}\n\n//# sourceURL=webpack://js-spread-grid/./src/types/FormattingRules.js?");

/***/ }),

/***/ "./src/types/Selection.js":
/*!********************************!*\
  !*** ./src/types/Selection.js ***!
  \********************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"default\": () => (/* binding */ Selection)\n/* harmony export */ });\n/* harmony import */ var _core_utils_stringifyId__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../core-utils/stringifyId */ \"./src/core-utils/stringifyId.js\");\n\n\nclass Selection {\n    constructor(selectedCells) {\n        this.lookup = new Map();\n\n        selectedCells.forEach(cell => {\n            const rowKey = (0,_core_utils_stringifyId__WEBPACK_IMPORTED_MODULE_0__[\"default\"])(cell.rowId);\n            const columnKey = (0,_core_utils_stringifyId__WEBPACK_IMPORTED_MODULE_0__[\"default\"])(cell.columnId);\n\n            if (!this.lookup.has(rowKey))\n                this.lookup.set(rowKey, new Set());\n\n            this.lookup.get(rowKey).add(columnKey);\n        });\n    }\n\n    isKeySelected(rowKey, columnKey) {\n        return this.lookup.has(rowKey) && this.lookup.get(rowKey).has(columnKey);\n    }\n\n    isIdSelected(rowId, columnId) {\n        return this.isKeySelected((0,_core_utils_stringifyId__WEBPACK_IMPORTED_MODULE_0__[\"default\"])(rowId), (0,_core_utils_stringifyId__WEBPACK_IMPORTED_MODULE_0__[\"default\"])(columnId));\n    }\n}\n\n//# sourceURL=webpack://js-spread-grid/./src/types/Selection.js?");

/***/ }),

/***/ "./src/types/TextResolver.js":
/*!***********************************!*\
  !*** ./src/types/TextResolver.js ***!
  \***********************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"default\": () => (/* binding */ TextResolver)\n/* harmony export */ });\nclass TextResolver\n{\n    constructor() {\n        this.canvas = document.createElement('canvas');\n        this.context = this.canvas.getContext('2d');\n        this.fontMetrics = new Map();\n    }\n\n    getFontMetrics(font) {\n        const key = font;\n\n        if (this.fontMetrics.has(key))\n            return this.fontMetrics.get(key);\n\n        const ctx = this.context;\n\n        // TODO: Set other font properties\n        ctx.font = font;\n\n        const textMetrics = ctx.measureText('X');\n\n        const middle = (textMetrics.actualBoundingBoxDescent - textMetrics.actualBoundingBoxAscent) / 2;\n        const topOffset = middle + textMetrics.fontBoundingBoxAscent;\n        const bottomOffset = textMetrics.fontBoundingBoxDescent - middle;\n\n        const fontMetrics = {\n            topOffset: topOffset,\n            middle: -middle,\n            bottomOffset: bottomOffset\n        };\n\n        this.fontMetrics.set(key, fontMetrics);\n\n        return fontMetrics;\n    }\n}\n\n//# sourceURL=webpack://js-spread-grid/./src/types/TextResolver.js?");

/***/ }),

/***/ "./src/types/VisibilityResolver.js":
/*!*****************************************!*\
  !*** ./src/types/VisibilityResolver.js ***!
  \*****************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"default\": () => (/* binding */ VisibilityResolver)\n/* harmony export */ });\n/* harmony import */ var _Edition__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./Edition */ \"./src/types/Edition.js\");\n\n\nclass VisibilityResolver {\n    constructor(formattingRules, data, rows, columns, filtering) {\n        this.formattingRules = formattingRules;\n        this.data = data;\n        this.rows = rows;\n        this.columns = columns;\n        this.edition = new _Edition__WEBPACK_IMPORTED_MODULE_0__[\"default\"]([]);\n        this.filtering = filtering;\n    }\n\n    findVisibleColumns() {\n        if (!this.filtering.hasRowFilters())\n            return this.columns;\n\n        return this.columns.filter(column => {\n            return this.rows.every(row => {\n                if (!this.filtering.hasRowFiltersByKey(row.key))\n                    return true;\n\n                const cell = this.formattingRules.resolve(\n                    this.data,\n                    this.rows,\n                    this.columns,\n                    row,\n                    column,\n                    this.edition,\n                    this.filtering);\n\n                return cell.visible;\n            });\n        });\n    }\n\n    findVisibleRows() {\n        // TODO: don't include search columns in that check\n        if (!this.filtering.hasColumnFilters())\n            return this.rows;\n\n        return this.rows.filter(row => {\n            return this.columns.every(column => {\n                if (!this.filtering.hasColumnFiltersByKey(column.key))\n                    return true;\n\n                const cell = this.formattingRules.resolve(\n                    this.data,\n                    this.rows,\n                    this.columns,\n                    row,\n                    column,\n                    this.edition,\n                    this.filtering);\n\n                return cell.visible;\n            });\n        });\n    }\n}\n\n//# sourceURL=webpack://js-spread-grid/./src/types/VisibilityResolver.js?");

/***/ })

/******/ 	});
/************************************************************************/
/******/ 	// The module cache
/******/ 	var __webpack_module_cache__ = {};
/******/ 	
/******/ 	// The require function
/******/ 	function __webpack_require__(moduleId) {
/******/ 		// Check if module is in cache
/******/ 		var cachedModule = __webpack_module_cache__[moduleId];
/******/ 		if (cachedModule !== undefined) {
/******/ 			return cachedModule.exports;
/******/ 		}
/******/ 		// Create a new module (and put it into the cache)
/******/ 		var module = __webpack_module_cache__[moduleId] = {
/******/ 			// no module.id needed
/******/ 			// no module.loaded needed
/******/ 			exports: {}
/******/ 		};
/******/ 	
/******/ 		// Execute the module function
/******/ 		__webpack_modules__[moduleId](module, module.exports, __webpack_require__);
/******/ 	
/******/ 		// Return the exports of the module
/******/ 		return module.exports;
/******/ 	}
/******/ 	
/************************************************************************/
/******/ 	/* webpack/runtime/define property getters */
/******/ 	(() => {
/******/ 		// define getter functions for harmony exports
/******/ 		__webpack_require__.d = (exports, definition) => {
/******/ 			for(var key in definition) {
/******/ 				if(__webpack_require__.o(definition, key) && !__webpack_require__.o(exports, key)) {
/******/ 					Object.defineProperty(exports, key, { enumerable: true, get: definition[key] });
/******/ 				}
/******/ 			}
/******/ 		};
/******/ 	})();
/******/ 	
/******/ 	/* webpack/runtime/hasOwnProperty shorthand */
/******/ 	(() => {
/******/ 		__webpack_require__.o = (obj, prop) => (Object.prototype.hasOwnProperty.call(obj, prop))
/******/ 	})();
/******/ 	
/******/ 	/* webpack/runtime/make namespace object */
/******/ 	(() => {
/******/ 		// define __esModule on exports
/******/ 		__webpack_require__.r = (exports) => {
/******/ 			if(typeof Symbol !== 'undefined' && Symbol.toStringTag) {
/******/ 				Object.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });
/******/ 			}
/******/ 			Object.defineProperty(exports, '__esModule', { value: true });
/******/ 		};
/******/ 	})();
/******/ 	
/************************************************************************/
/******/ 	
/******/ 	// startup
/******/ 	// Load entry module and return exports
/******/ 	// This entry module can't be inlined because the eval devtool is used.
/******/ 	var __webpack_exports__ = __webpack_require__("./src/index.js");
/******/ 	
/******/ })()
;